{
  "name": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "CustomiBI",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;Initial Catalog=HSD_ES;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      }
    ],
    "tables": [
      {
        "name": "QueryIntelWW",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "sourceColumn": "Intel Year-Work Week"
          },
          {
            "type": "calculated",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(QueryIntelWW), QueryIntelWW[Intel Year-Work Week]<=EARLIER(QueryIntelWW[Intel Year-Work Week]))"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelWW",
            "source": {
              "type": "query",
              "query": "select distinct [Intel Year-Work Week] from  [V_TIME_DAY_CachedTable] order by [Intel Year-Work Week] asc",
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from  [V_TIME_DAY_CachedTable] order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from  [V_TIME_DAY_CachedTable] order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          },
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct [Intel Year-Work Week] from  [V_TIME_DAY_CachedTable] order by [Intel Year-Work Week] asc"
          }
        ]
      },
      {
        "name": "QuerylastRefresh",
        "columns": [
          {
            "name": "LastRefresh",
            "dataType": "dateTime",
            "sourceColumn": "LastRefresh",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "LastRefresh PST",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[LastRefresh]&\" PST\""
          }
        ],
        "partitions": [
          {
            "name": "QuerylastRefresh",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "getdate() as LastRefresh",
                "from [ipg_devsuborg_cached]"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "getdate() as LastRefresh",
                  "from [ipg_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "getdate() as LastRefresh",
              "from [ipg_devsuborg_cached]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QuerylastRefresh"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "getdate() as LastRefresh",
              "from [ipg_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryBug",
        "columns": [
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release_affected",
            "dataType": "string",
            "sourceColumn": "release_affected",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status",
            "sortByColumn": "status_order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "orig_found",
            "dataType": "string",
            "sourceColumn": "orig_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "lineage",
            "dataType": "int64",
            "sourceColumn": "lineage",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "original_lineage",
            "dataType": "int64",
            "sourceColumn": "original_lineage",
            "sourceProviderType": "Integer"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.env_found",
            "dataType": "string",
            "sourceColumn": "bugeco.env_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.team_found",
            "dataType": "string",
            "sourceColumn": "bugeco.team_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bug_category",
            "dataType": "string",
            "sourceColumn": "bug_category",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "from_tenant",
            "dataType": "string",
            "sourceColumn": "from_tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "from_subject",
            "dataType": "string",
            "sourceColumn": "from_subject",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.type",
            "dataType": "string",
            "sourceColumn": "bugeco.type",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "stepping_fix",
            "dataType": "string",
            "sourceColumn": "stepping_fix",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "stepping_found",
            "dataType": "string",
            "sourceColumn": "stepping_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "component",
            "dataType": "string",
            "sourceColumn": "component",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "sourceProviderType": "VarChar",
            "dataCategory": "WebUrl"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentmonth",
            "dataType": "int64",
            "sourceColumn": "currentmonth",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentyear",
            "dataType": "int64",
            "sourceColumn": "currentyear",
            "sourceProviderType": "Integer"
          },
          {
            "name": "bugeco.drop_fix",
            "dataType": "string",
            "sourceColumn": "bugeco.drop_fix",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_analysis",
            "dataType": "string",
            "sourceColumn": "retro_analysis",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_learnings",
            "dataType": "string",
            "sourceColumn": "retro_learnings",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_ip_escape",
            "dataType": "string",
            "sourceColumn": "retro_ip_escape",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_status",
            "dataType": "string",
            "sourceColumn": "retro_status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_owner",
            "dataType": "string",
            "sourceColumn": "retro_owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.ccb_prq_gating",
            "dataType": "string",
            "sourceColumn": "bugeco.ccb_prq_gating",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_found_bySilicon",
            "dataType": "string",
            "sourceColumn": "is_found_bySilicon",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww"
          },
          {
            "name": "is_found_byPlatform",
            "dataType": "string",
            "sourceColumn": "is_found_byPlatform"
          },
          {
            "type": "calculated",
            "name": "IsCurrentWW",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([ww]=[currentww], \"currentWW\",\"NotCurrentWW\")"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT([ww_submitted_date], 4)"
          },
          {
            "name": "submitter_org",
            "dataType": "string",
            "sourceColumn": "submitter_org"
          },
          {
            "name": "status_reason",
            "dataType": "string",
            "sourceColumn": "status_reason"
          },
          {
            "type": "calculated",
            "name": "current_ww_nbr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([currentww],2)"
          },
          {
            "type": "calculated",
            "name": "ww_submitted_nbr",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE(SUBSTITUTE(QueryBug[ww_submitted_date], \"ww\", \"\"))"
          },
          {
            "type": "calculated",
            "name": "ww_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([ww_submitted_nbr], 2)"
          },
          {
            "type": "calculated",
            "name": "2019_bug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "If(QueryBug[SubmittedYear]=\"2019\"&& QueryBug[IsCurrentWW]=\"CurrentWW\"&& not QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}&&QueryBug[bugeco.type]=\"bug\", 1, 0)"
            ]
          },
          {
            "type": "calculated",
            "name": "DevSubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryDevSubOrg[devsuborg])"
          },
          {
            "name": "report_type",
            "dataType": "string",
            "sourceColumn": "report_type"
          },
          {
            "name": "closed_reason",
            "dataType": "string",
            "sourceColumn": "closed_reason"
          },
          {
            "name": "lineage_final",
            "dataType": "int64",
            "sourceColumn": "lineage_final"
          },
          {
            "type": "calculated",
            "name": "lineage_ID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([lineage_final]), [id], [lineage_final])"
          },
          {
            "type": "calculated",
            "name": "unique_ww_submitted_nbr",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX (",
              "    FILTER ( queryBug, QueryBug[Lineage_ID] = EARLIER ( QueryBug[Lineage_ID] ) ),",
              "    QueryBug[ww_submitted_nbr]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "MInSetID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "MINX (",
              "    FILTER (",
              "        QueryBug,",
              "        QueryBug[Lineage_ID] = EARLIER ( QueryBug[Lineage_ID] )",
              "            && QueryBug[ww_submitted_nbr] = EARLIER ( QueryBug[ww_submitted_nbr] )",
              "            && QueryBug[family] = EARLIER ( QueryBug[family] )",
              "    ),",
              "    QueryBug[id]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "IsUnique",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([ww_submitted_nbr]=[unique_ww_submitted_nbr]&&[id]=[MinSetID], 1, 0)"
          },
          {
            "name": "component_group",
            "dataType": "string",
            "sourceColumn": "component_group"
          },
          {
            "name": "Alpha YYYYWW",
            "dataType": "string",
            "sourceColumn": "Alpha YYYYWW"
          },
          {
            "name": "PV YYYYWW",
            "dataType": "string",
            "sourceColumn": "PV YYYYWW"
          },
          {
            "name": "PVMonthOffset",
            "dataType": "double",
            "sourceColumn": "PVMonthOffset"
          },
          {
            "name": "SubmittedDate",
            "dataType": "dateTime",
            "sourceColumn": "SubmittedDate"
          },
          {
            "name": "AlphaDate",
            "dataType": "dateTime",
            "sourceColumn": "AlphaDate"
          },
          {
            "name": "PVDate",
            "dataType": "dateTime",
            "sourceColumn": "PVDate"
          },
          {
            "name": "MonthOffset",
            "dataType": "double",
            "sourceColumn": "MonthOffset"
          },
          {
            "name": "program",
            "dataType": "string",
            "sourceColumn": "program"
          },
          {
            "type": "calculated",
            "name": "ip_supplier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryDevSubOrg[ip_supplier])"
          },
          {
            "type": "calculated",
            "name": "IP_Family",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([tenant]=\"client_conn_ip\", \"Thunderbolt\", RELATED(QueryDevSubOrg[family]))"
          },
          {
            "name": "status_order",
            "dataType": "int64",
            "sourceColumn": "status_order"
          },
          {
            "type": "calculated",
            "name": "IsRealBug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([component_group] in {\"3rd Party\", \"Tool\"}, 0, if([status] in {\"open\", \"approved\", \"change_defined\", \"repo_modified\", \"complete\", \"future\"}, 1, if([status]=\"rejected\"&&[status_reason] in {\"rejected.future_product\", \"rejected.wont_fix\", \"rejected.future_stepping\", \"rejected.wont_do\", \"wont_fix\", \"future_project\", \"future_stepping\"},1, 0)))"
          },
          {
            "type": "calculated",
            "name": "PrevProgram",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE(QueryAtlas[PrevProject], QueryAtlas[project], QueryBug[program], \"No Previous Program\")"
            ]
          },
          {
            "type": "calculated",
            "name": "AlphaOffset",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE(QueryAtlas[Alpha Offset], QueryAtlas[project], QueryBug[program])"
          },
          {
            "type": "calculated",
            "name": "InternalBacklog",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(QueryBug[IsRealBug]=1 && QueryBug[IsUnique]=1 && QueryBug[bugeco.type]=\"bug\"",
              "&& QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\",",
              " \"SW/FW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\"} &&",
              "QueryBug[status] in {\"open\", \"approved\", \"change_defined\", \"future\"}",
              ", 1, 0)"
            ]
          },
          {
            "type": "calculated",
            "name": "CustomerBacklog",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(QueryBug[IsRealBug]=1 && QueryBug[IsUnique]=1 && QueryBug[bugeco.type]=\"bug\"",
              "&& QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\", \"SW/FW PreSiBug Found by Customers\"} &&",
              "QueryBug[status] in {\"open\", \"approved\", \"change_defined\", \"future\"}",
              ", 1, 0)"
            ]
          }
        ],
        "partitions": [
          {
            "name": "QueryBug",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
                "so keep the joining with table below to return data for alpha/beta/pv... 3/23/22*/",
                "",
                "",
                "select bug.*",
                ",CASE WHEN status = 'open' THEN 1",
                "          WHEN status = 'approved' THEN 2",
                "          WHEN status = 'change_defined' THEN 3",
                "          WHEN status = 'repo_modified' THEN 4",
                "          WHEN status = 'rejected' THEN 5",
                "          WHEN status = 'complete' THEN 6",
                "          WHEN status = 'future' THEN 7",
                "ELSE 8",
                "END as status_order",
                ",AlphaDates.[Alpha YYYYWW]",
                ",AlphaDates.[PV YYYYWW]",
                ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as SubmittedDate",
                ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDate ",
                ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDate",
                ",DATEDIFF(month,AlphaDate,SubmittedDate) as MonthOffset",
                ",DATEDIFF(month,PVDate,SubmittedDate) as PVMonthOffset",
                " from (",
                "select ",
                "ww",
                ",[tenant]",
                ",[family]",
                ",priority",
                ",[release]",
                ",[release_affected] ",
                ", [owner]",
                ",status",
                ",[status_reason]",
                ",[orig_found]",
                ",[project]",
                ",[program]",
                ",[id]",
                ",[lineage]",
                ",[original_lineage]",
                ",[title]",
                ", [ww_submitted_date]",
                ",[bugeco.env_found] ",
                ",[bugeco.team_found]",
                ", [bug_category]",
                ",from_tenant",
                ", from_subject",
                ",[bugeco.type]",
                ",[stepping_fix]",
                ",[stepping_found]",
                ",component",
                ",component_group",
                ",url",
                ",[currentww]",
                ",[currentmonth]",
                ",[currentyear]",
                ",[bugeco.drop_fix]",
                ",[retro_analysis]",
                ",retro_learnings",
                ",retro_ip_escape",
                ",retro_status",
                ",retro_owner",
                ",[bugeco.ccb_prq_gating]",
                ",[is_found_byPlatform]",
                ",[is_found_bySilicon]",
                ",submitter_org",
                ",[report_type]",
                ",null as [closed_reason]",
                ",[lineage_final]",
                "from v_ipg_fwsw_bug",
                ")bug",
                "",
                "left join ",
                "(",
                "select case ",
                "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                "when DieName like '%Meteor Lake%' then 'Meteor Lake' ",
                "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                "end as project",
                ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                "from (",
                "\tselect * from ",
                "\t\t       (select  [DieID],[DieName],",
                "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "\tleft join",
                "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                "\t\t      from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                "\t\t      ) as soc_dates",
                "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                ") as atlas",
                "where 1=1",
                "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                "and ([project] is not null and [project] <> '')",
                "group by",
                "project",
                ")AlphaDates",
                "on bug.program = AlphaDates.project"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
                  "so keep the joining with table below to return data for alpha/beta/pv... 3/23/22*/",
                  "",
                  "",
                  "select bug.*",
                  ",CASE WHEN status = 'open' THEN 1",
                  "          WHEN status = 'approved' THEN 2",
                  "          WHEN status = 'change_defined' THEN 3",
                  "          WHEN status = 'repo_modified' THEN 4",
                  "          WHEN status = 'rejected' THEN 5",
                  "          WHEN status = 'complete' THEN 6",
                  "          WHEN status = 'future' THEN 7",
                  "ELSE 8",
                  "END as status_order",
                  ",AlphaDates.[Alpha YYYYWW]",
                  ",AlphaDates.[PV YYYYWW]",
                  ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as SubmittedDate",
                  ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDate ",
                  ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDate",
                  ",DATEDIFF(month,AlphaDate,SubmittedDate) as MonthOffset",
                  ",DATEDIFF(month,PVDate,SubmittedDate) as PVMonthOffset",
                  " from (",
                  "select ",
                  "ww",
                  ",[tenant]",
                  ",[family]",
                  ",priority",
                  ",[release]",
                  ",[release_affected] ",
                  ", [owner]",
                  ",status",
                  ",[status_reason]",
                  ",[orig_found]",
                  ",[project]",
                  ",[program]",
                  ",[id]",
                  ",[lineage]",
                  ",[original_lineage]",
                  ",[title]",
                  ", [ww_submitted_date]",
                  ",[bugeco.env_found] ",
                  ",[bugeco.team_found]",
                  ", [bug_category]",
                  ",from_tenant",
                  ", from_subject",
                  ",[bugeco.type]",
                  ",[stepping_fix]",
                  ",[stepping_found]",
                  ",component",
                  ",component_group",
                  ",url",
                  ",[currentww]",
                  ",[currentmonth]",
                  ",[currentyear]",
                  ",[bugeco.drop_fix]",
                  ",[retro_analysis]",
                  ",retro_learnings",
                  ",retro_ip_escape",
                  ",retro_status",
                  ",retro_owner",
                  ",[bugeco.ccb_prq_gating]",
                  ",[is_found_byPlatform]",
                  ",[is_found_bySilicon]",
                  ",submitter_org",
                  ",[report_type]",
                  ",null as [closed_reason]",
                  ",[lineage_final]",
                  "from v_ipg_fwsw_bug",
                  ")bug",
                  "",
                  "left join ",
                  "(",
                  "select case ",
                  "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                  "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                  "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                  "when DieName like '%Meteor Lake%' then 'Meteor Lake' ",
                  "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                  "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                  "end as project",
                  ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                  ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                  "from (",
                  "\tselect * from ",
                  "\t\t       (select  [DieID],[DieName],",
                  "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                  "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "\tleft join",
                  "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                  "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                  "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                  "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                  "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                  "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                  "\t\t      from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                  "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                  "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                  "\t\t      ) as soc_dates",
                  "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                  "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                  "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                  ") as atlas",
                  "where 1=1",
                  "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                  "and ([project] is not null and [project] <> '')",
                  "group by",
                  "project",
                  ")AlphaDates",
                  "on bug.program = AlphaDates.project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "TotalofID",
            "expression": [
              "",
              "CALCULATE (",
              "    COUNT ( [id] ),",
              "QueryBug[IsRealBug] =  1",
              ")+0"
            ]
          },
          {
            "name": "2019IntelExternal",
            "expression": [
              "",
              "CALCULATE (",
              "    DISTINCTCOUNT ( [id] ),",
              "    QueryBug[SubmittedYear] = \"2019\",",
              "    QueryBug[IsCurrentWW] = \"CurrentWW\",",
              "    QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"},",
              "    QueryBug[bugeco.type] = \"bug\",",
              "   QueryBug[IsRealBug] = 1) + 0"
            ]
          },
          {
            "name": "2019CIGExternal",
            "expression": "CALCULATE(DISTINCTCOUNT([id]), QueryBug[SubmittedYear]=\"2019\", QueryBug[IsCurrentWW]=\"CurrentWW\", QueryBug[is_found_byPlatform] <>\"Found by IP\", QueryBug[bugeco.type]=\"bug\" , QueryBug[IsRealBug] = 1)+0"
          },
          {
            "name": "2020CIGExternalActual",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]), QueryBug[SubmittedYear]=\"2020\", QueryBug[IsCurrentWW]=\"CurrentWW\", not QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"} , QueryBug[bugeco.type]=\"bug\" ,QueryBug[IsRealBug] = 1)+0"
            ]
          },
          {
            "name": "currentww_nbr",
            "expression": "max([current_ww_nbr])"
          },
          {
            "name": "2020Target",
            "expression": "[2019CIGExternal]/2",
            "formatString": "0"
          },
          {
            "name": "2020CIGExternalTrend",
            "expression": "if(ISBLANK([2020Target]), 0, [2020CIGExternalActual]*52/[currentww_nbr])",
            "formatString": "0"
          },
          {
            "name": "2020Remaining",
            "expression": "[2020Target]-[2020CIGExternalActual]",
            "formatString": "0"
          },
          {
            "name": "2020TrendColor",
            "expression": "[2020Target]-[2020CIGExternalTrend]"
          },
          {
            "name": "Cum2020",
            "expression": "If(max(QueryFWSWTrend[ww])<=max(QueryFWSWTrend[currentweek]), Calculate([2020CIGExternalActual], filter(all(QueryFWSWTrend[ww_trend]), QueryFWSWTrend[ww_trend]<=max(QueryFWSWTrend[ww_trend]))))"
          },
          {
            "name": "Cum2019",
            "expression": [
              "",
              "CALCULATE (",
              "    [2019CIGExternal],",
              "    FILTER (",
              "        ALL ( QueryFWSWTrend[ww_trend] ),",
              "        QueryFWSWTrend[ww_trend] <= MAX ( QueryFWSWTrend[ww_trend] )",
              "    )",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "Average2019Bug",
            "expression": "CALCULATE(sum([2019_bug])/52,all(QueryFWSWTrend))"
          },
          {
            "name": ".50xGoal",
            "expression": "Calculate(sumx(QueryFWSWTrend,[Average2019Bug])*0.5, filter(all(QueryFWSWTrend[ww_trend]), QueryFWSWTrend[ww_trend]<=max(QueryFWSWTrend[ww_trend])))",
            "formatString": "0"
          },
          {
            "name": "Component Group",
            "expression": "CALCULATE(DISTINCTCOUNT([id]), QueryBug[IsRealBug] = 1)"
          },
          {
            "name": "3rd party/tool total ID",
            "expression": " CALCULATE(DISTINCTCOUNT([id]), QueryBug[IsRealBug] = 1)"
          },
          {
            "name": "Alder Lake Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\" && QueryBug[IsRealBug] = 1)",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\" && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Meteor Lake\" && QueryBug[IsRealBug] = 1) ",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Meteor Lake\" && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Ice Lake\"  && QueryBug[IsRealBug] = 1)",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Tiger Lake\"  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\"  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Meteor Lake\"  && QueryBug[IsRealBug] = 1)",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Meteor Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Ice Lake\"  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Tiger Lake\"  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum Alpha-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Alder Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}",
              "                                                             && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}",
              "                                                             && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset]",
              "                    <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT (",
              "                    ISBLANK ( QueryBug[MonthOffset] )",
              "                )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum Alpha-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Alder Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug)",
              ",QueryBug[program] = \"Alder Lake\"&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              " && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Alder Lake\" &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "&& QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset])",
              ",filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\"",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "  && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Meteor Lake\" &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "  && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum Alpha-Bug-Found by IntelInternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset])",
              ",filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\"",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}   && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Meteor Lake\" ",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              " && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum Alpha-Bug-Found by IP",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),",
              "QueryBug[program] = \"Meteor Lake\"&& QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"} ",
              " && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Meteor Lake\" &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"} ",
              "",
              "&& QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) && QueryBug[IsRealBug] = 1 )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum Alpha-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              " && QueryBug[IsRealBug] = 1 ",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} ",
              "   && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset]",
              "                    <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT (",
              "                    ISBLANK ( QueryBug[MonthOffset] )",
              "                )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"} && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum Alpha-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Tiger Lake\" &&",
              "                    QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}   && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum Alpha-Bug-Found by IntelInternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),",
              "filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\"",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}    && QueryBug[IsRealBug] = 1 )), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Tiger Lake\"",
              " &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "&& QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset])  && QueryBug[IsRealBug] = 1 )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset])",
              ",filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\"",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"} && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = \"Tiger Lake\" ",
              "&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "&& QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) && QueryBug[IsRealBug] = 1 )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum PV-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Alder Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}   && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}   && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum PV-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Alder Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              " && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK(),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum PV-Bug-Found by IntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Alder Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              " && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Alder Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[pvMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum PV-Bug-Found by IntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Meteor Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"} && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Meteor Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum PV-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Meteor Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Meteor Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}   && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum PV-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum PV-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} ",
              "  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum PV-Bug-Found by IntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"} && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}  && QueryBug[IsRealBug] = 1 ",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum PV-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Tiger Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}   && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum PV-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Tiger Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              " && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum PV-Bug-Found by IntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Tiger Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Tiger Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"} && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum PV-Bug-Found by IntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Meteor Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              "  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Meteor Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"}  ",
              " && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum Alpha-Bug-Found by IP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER (",
              "                ALL ( QueryBug ),",
              "                QueryBug[program] = \"Ice Lake\"",
              "                    && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}  && QueryBug[IsRealBug] = 1",
              "            )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = \"Ice Lake\"",
              "                && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\",",
              "                                                         \"SW/FW PreSiBug Found by IP\"}  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Curr/Prev",
            "expression": " [CurrProgBugsNoTimeFilter] &\"/\"&[PrevProgBugsNoTimeFilter]"
          },
          {
            "name": "Curr/Prev%",
            "expression": [
              "",
              "IF(([PrevProgBugsNoTimeFilter]=0) && ([CurrProgBugsNoTimeFilter] <> 0) && [CurrProgBugsNoTimeFilter] > 0, -1,",
              "",
              "    IF([PrevProgBugsNoTimeFilter]=0 && [CurrProgBugsNoTimeFilter]=0, 0,",
              "",
              "    ([PrevProgBugsNoTimeFilter]-[CurrProgBugsNoTimeFilter])/[PrevProgBugsNoTimeFilter]))"
            ]
          },
          {
            "name": "Curr/Prev%Round",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([Curr/Prev%]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/PrevTrendArrow",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([Curr/Prev%]), BLANK(),",
              "    [Curr/Prev%]=0, UNICHAR(9644),",
              "    [Curr/Prev%]>0, UNICHAR(9660),",
              "    [Curr/Prev%]<0, UNICHAR(9650),",
              "    BLANK())"
            ]
          },
          {
            "name": "All Bug Found by Customer",
            "expression": [
              " ",
              "CALCULATE(VALUE([CurrProgBugs]), ",
              "QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\", \"SW/FW PreSiBug Found by Customers\"}",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "All Bug Found by IP",
            "expression": [
              " ",
              "CALCULATE(VALUE([CurrProgBugs]), ",
              "QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\"}",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "All Bug Found by SoC",
            "expression": [
              " ",
              "CALCULATE(VALUE([CurrProgBugs]), ",
              "QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\"}",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "CurrProgBugs",
            "expression": [
              "",
              " ",
              "var CurrProgram = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalofID]), ",
              "CONTAINSSTRING(CurrProgram, QueryBug[program]),",
              "QueryBug[unique_ww_submitted_nbr] in VALUES(CalendarDate[ww]),",
              "--QueryBug[program] <> BLANK(),",
              "--QueryBug[program] <> \"\",",
              "QueryBug[bugeco.type]=\"bug\",",
              "QueryBug[IsUnique]=1",
              ")+0"
            ],
            "formatString": "0"
          },
          {
            "name": "InternalBacklogMetric",
            "expression": [
              "",
              "CALCULATE(VALUE([CurrProgBugs]), ",
              "QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\",",
              " \"SW/FW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\"},",
              "QueryBug[status] in {\"open\", \"approved\", \"change_defined\", \"future\"})"
            ],
            "formatString": "0"
          },
          {
            "name": "CustomerBacklogMetric",
            "expression": [
              "",
              "CALCULATE(VALUE([CurrProgBugs]), ",
              "QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\", \"SW/FW PreSiBug Found by Customers\"},",
              "QueryBug[status] in {\"open\", \"approved\", \"change_defined\", \"future\"})"
            ],
            "formatString": "0"
          },
          {
            "name": "UniqueBugs",
            "expression": [
              "",
              "CALCULATE(VALUE([TotalofID]), QueryBug[IsUnique]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsRealBug]=1)"
            ],
            "formatString": "0"
          },
          {
            "name": "PrevProgBugsNoTimeFilter",
            "expression": [
              "",
              " ",
              "var LastProgram = CONCATENATEX(VALUES(QueryAtlas[PrevProject]), QueryAtlas[PrevProject], \",\")",
              "var currOffset = MIN(QueryAtlas[Alpha Offset])",
              "",
              "return",
              "--currOffset",
              "--LastProgram",
              "IF(Isfiltered(QueryAtlas[project]),",
              "CALCULATE(VALUE([TotalofID]), ",
              "CONTAINSSTRING(LastProgram, QueryBug[program]),",
              "QueryBug[ww_submitted_nbr]>0,",
              "--QueryBug[program] <> BLANK(),",
              "--QueryBug[program] <> \"\",",
              "QueryBug[MonthOffset]<= currOffset,",
              "QueryBug[bugeco.type]=\"bug\",",
              "QueryBug[IsUnique]=1",
              ")+0 ,0)"
            ]
          },
          {
            "name": "CurrProgBugsNoTimeFilter",
            "expression": [
              "",
              " ",
              "var CurrProgram = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalofID]), ",
              "CONTAINSSTRING(CurrProgram, QueryBug[program]),",
              "--QueryBug[program] <> BLANK(),",
              "--QueryBug[program] <> \"\",",
              "QueryBug[bugeco.type]=\"bug\",",
              "QueryBug[IsUnique]=1",
              ")+0"
            ]
          },
          {
            "name": "TESTING THIS (ALPHA EXTERNAL)",
            "expression": [
              " ",
              "",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug)",
              ",QueryBug[program] = \"Alder Lake\"&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              " && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        [ValueComparable] = \"Alder Lake\" &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "&& QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              "))"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
              "so keep the joining with table below to return data for alpha/beta/pv... 3/23/22*/",
              "",
              "",
              "select bug.*",
              ",CASE WHEN status = 'open' THEN 1",
              "          WHEN status = 'approved' THEN 2",
              "          WHEN status = 'change_defined' THEN 3",
              "          WHEN status = 'repo_modified' THEN 4",
              "          WHEN status = 'rejected' THEN 5",
              "          WHEN status = 'complete' THEN 6",
              "          WHEN status = 'future' THEN 7",
              "ELSE 8",
              "END as status_order",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as SubmittedDate",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDate ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDate",
              ",DATEDIFF(month,AlphaDate,SubmittedDate) as MonthOffset",
              ",DATEDIFF(month,PVDate,SubmittedDate) as PVMonthOffset",
              " from (",
              "select ",
              "ww",
              ",[tenant]",
              ",[family]",
              ",priority",
              ",[release]",
              ",[release_affected] ",
              ", [owner]",
              ",status",
              ",[status_reason]",
              ",[orig_found]",
              ",[project]",
              ",[program]",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ", [ww_submitted_date]",
              ",[bugeco.env_found] ",
              ",[bugeco.team_found]",
              ", [bug_category]",
              ",from_tenant",
              ", from_subject",
              ",[bugeco.type]",
              ",[stepping_fix]",
              ",[stepping_found]",
              ",component",
              ",component_group",
              ",url",
              ",[currentww]",
              ",[currentmonth]",
              ",[currentyear]",
              ",[bugeco.drop_fix]",
              ",[retro_analysis]",
              ",retro_learnings",
              ",retro_ip_escape",
              ",retro_status",
              ",retro_owner",
              ",[bugeco.ccb_prq_gating]",
              ",[is_found_byPlatform]",
              ",[is_found_bySilicon]",
              ",submitter_org",
              ",[report_type]",
              ",null as [closed_reason]",
              ",[lineage_final]",
              "from v_ipg_fwsw_bug",
              ")bug",
              "",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake' ",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on bug.program = AlphaDates.project"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryBug"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
              "so keep the joining with table below to return data for alpha/beta/pv... 3/23/22*/",
              "",
              "",
              "select bug.*",
              ",CASE WHEN status = 'open' THEN 1",
              "          WHEN status = 'approved' THEN 2",
              "          WHEN status = 'change_defined' THEN 3",
              "          WHEN status = 'repo_modified' THEN 4",
              "          WHEN status = 'rejected' THEN 5",
              "          WHEN status = 'complete' THEN 6",
              "          WHEN status = 'future' THEN 7",
              "ELSE 8",
              "END as status_order",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as SubmittedDate",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDate ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDate",
              ",DATEDIFF(month,AlphaDate,SubmittedDate) as MonthOffset",
              ",DATEDIFF(month,PVDate,SubmittedDate) as PVMonthOffset",
              " from (",
              "select ",
              "ww",
              ",[tenant]",
              ",[family]",
              ",priority",
              ",[release]",
              ",[release_affected] ",
              ", [owner]",
              ",status",
              ",[status_reason]",
              ",[orig_found]",
              ",[project]",
              ",[program]",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ", [ww_submitted_date]",
              ",[bugeco.env_found] ",
              ",[bugeco.team_found]",
              ", [bug_category]",
              ",from_tenant",
              ", from_subject",
              ",[bugeco.type]",
              ",[stepping_fix]",
              ",[stepping_found]",
              ",component",
              ",component_group",
              ",url",
              ",[currentww]",
              ",[currentmonth]",
              ",[currentyear]",
              ",[bugeco.drop_fix]",
              ",[retro_analysis]",
              ",retro_learnings",
              ",retro_ip_escape",
              ",retro_status",
              ",retro_owner",
              ",[bugeco.ccb_prq_gating]",
              ",[is_found_byPlatform]",
              ",[is_found_bySilicon]",
              ",submitter_org",
              ",[report_type]",
              ",null as [closed_reason]",
              ",[lineage_final]",
              "from v_ipg_fwsw_bug",
              ")bug",
              "",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake' ",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on bug.program = AlphaDates.project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryDevSubOrg",
        "columns": [
          {
            "name": "devsuborg",
            "dataType": "string",
            "sourceColumn": "devsuborg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family"
          },
          {
            "name": "old_family",
            "dataType": "string",
            "sourceColumn": "old_family"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier"
          }
        ],
        "partitions": [
          {
            "name": "QueryDevSubOrg",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * from",
                "(",
                "select distinct old_family",
                ",CASE WHEN family is null or family = '' or family in ('TBD', 'multi') THEN old_family ",
                "  ELSE family",
                "END as family",
                ",CASE WHEN ip_supplier is null or ip_supplier = '' THEN b.devgroup ELSE a.ip_supplier END as ip_supplier",
                ",CASE WHEN a.devsuborg is null or a.devsuborg = '' THEN b.devsuborg ELSE a.devsuborg END as devsuborg",
                "from v_ipg_family_gladius a",
                "left join (select distinct ipfamily, devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'ipg') b ",
                "on a.old_family = b.ipfamily ) a",
                "where devsuborg is  not null and devsuborg <>''"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
                  "(",
                  "select distinct old_family",
                  ",CASE WHEN family is null or family = '' or family in ('TBD', 'multi') THEN old_family ",
                  "  ELSE family",
                  "END as family",
                  ",CASE WHEN ip_supplier is null or ip_supplier = '' THEN b.devgroup ELSE a.ip_supplier END as ip_supplier",
                  ",CASE WHEN a.devsuborg is null or a.devsuborg = '' THEN b.devsuborg ELSE a.devsuborg END as devsuborg",
                  "from v_ipg_family_gladius a",
                  "left join (select distinct ipfamily, devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'ipg') b ",
                  "on a.old_family = b.ipfamily ) a",
                  "where devsuborg is  not null and devsuborg <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * from",
              "(",
              "select distinct old_family",
              ",CASE WHEN family is null or family = '' or family in ('TBD', 'multi') THEN old_family ",
              "  ELSE family",
              "END as family",
              ",CASE WHEN ip_supplier is null or ip_supplier = '' THEN b.devgroup ELSE a.ip_supplier END as ip_supplier",
              ",CASE WHEN a.devsuborg is null or a.devsuborg = '' THEN b.devsuborg ELSE a.devsuborg END as devsuborg",
              "from v_ipg_family_gladius a",
              "left join (select distinct ipfamily, devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'ipg') b ",
              "on a.old_family = b.ipfamily ) a",
              "where devsuborg is  not null and devsuborg <>''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryDevSubOrg"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from",
              "(",
              "select distinct old_family",
              ",CASE WHEN family is null or family = '' or family in ('TBD', 'multi') THEN old_family ",
              "  ELSE family",
              "END as family",
              ",CASE WHEN ip_supplier is null or ip_supplier = '' THEN b.devgroup ELSE a.ip_supplier END as ip_supplier",
              ",CASE WHEN a.devsuborg is null or a.devsuborg = '' THEN b.devsuborg ELSE a.devsuborg END as devsuborg",
              "from v_ipg_family_gladius a",
              "left join (select distinct ipfamily, devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'ipg') b ",
              "on a.old_family = b.ipfamily ) a",
              "where devsuborg is  not null and devsuborg <>''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryRCR",
        "columns": [
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status_reason",
            "dataType": "string",
            "sourceColumn": "status_reason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "sourceProviderType": "VarChar",
            "dataCategory": "WebUrl"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentmonth",
            "dataType": "int64",
            "sourceColumn": "currentmonth",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentyear",
            "dataType": "int64",
            "sourceColumn": "currentyear",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "IsCurrentWeek",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([ww]=[currentww], 1, 0)"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT([ww_submitted_date],4)"
          },
          {
            "type": "calculated",
            "name": "DevSubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryDevSubOrg[devsuborg])"
          },
          {
            "type": "calculated",
            "name": "yyyyww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LEFT(QueryRCR[ww_submitted_date], 4) & RIGHT(QueryRCR[ww_submitted_date],2)"
          },
          {
            "type": "calculated",
            "name": "WWSeqNum",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWW[WWSeqNbr])"
          },
          {
            "type": "calculated",
            "name": "date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "(DATE ( VALUE ( LEFT (QueryRCR[yyyyww], 4 ) ), 1, 1 )",
              "    + VALUE ( RIGHT ( QueryRCR[yyyyww], 2 ) ) * 7",
              "    - 1)"
            ]
          },
          {
            "name": "Alpha YYYYWW",
            "dataType": "string",
            "sourceColumn": "Alpha YYYYWW"
          },
          {
            "type": "calculated",
            "name": "Alpha Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "if (QueryRCR[Alpha YYYYWW] <> \"\",(DATE ( VALUE ( LEFT (QueryRCR[Alpha YYYYWW], 4 ) ), 1, 1 )",
              "    + VALUE ( RIGHT ( QueryRCR[Alpha YYYYWW], 2 ) ) * 7",
              "    - 1),date(1900,1,1))"
            ]
          },
          {
            "name": "DateTest",
            "dataType": "dateTime",
            "sourceColumn": "DateTest"
          },
          {
            "name": "AlphaDateTest",
            "dataType": "dateTime",
            "sourceColumn": "AlphaDateTest"
          },
          {
            "name": "MonthOffsetTest",
            "dataType": "double",
            "sourceColumn": "MonthOffsetTest"
          },
          {
            "type": "calculated",
            "name": "isAlpha",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryRCR[MonthOffsetTest] = 0 && not(ISBLANK(QueryRCR[MonthOffsetTest])), 1, 0)"
          },
          {
            "name": "PV YYYYWW",
            "dataType": "string",
            "sourceColumn": "PV YYYYWW"
          },
          {
            "name": "PVDateTest",
            "dataType": "dateTime",
            "sourceColumn": "PVDateTest"
          },
          {
            "name": "PVMonthOffset",
            "dataType": "double",
            "sourceColumn": "PVMonthOffset"
          },
          {
            "type": "calculated",
            "name": "isPV",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryRCR[PVMonthOffset] = 0 && not(ISBLANK(QueryRCR[PVMonthOffset])), 1, 0)"
          },
          {
            "name": "feature_type",
            "dataType": "string",
            "sourceColumn": "feature_type"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([tenant]=\"client_conn_ip\", \"Thunderbolt\", RELATED(QueryDevSubOrg[family]))"
          },
          {
            "type": "calculated",
            "name": "ip_supplier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryDevSubOrg[ip_supplier])"
          },
          {
            "name": "tag",
            "dataType": "string",
            "sourceColumn": "tag"
          },
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category"
          },
          {
            "name": "submitted_date",
            "dataType": "dateTime",
            "sourceColumn": "submitted_date"
          },
          {
            "type": "calculated",
            "name": "HWWASeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(QueryRCR[AlphaOffsetSeqNbr]),if(ISBLANK(RELATED(QueryAtlas[AlphaSeqNbr])),  9999, RELATED(QueryAtlas[AlphaSeqNbr])+4))"
          },
          {
            "type": "calculated",
            "name": "DebugWASeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryAtlas[VS08SeqNbr])),  9999, RELATED(QueryAtlas[VS08SeqNbr])+2)"
          },
          {
            "type": "calculated",
            "name": "HWWALate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([HWWASeqNbr]=9999, 2, if([WWSeqNum]<[HWWASeqNbr], 0, 1))"
          },
          {
            "type": "calculated",
            "name": "CustomerSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryAtlas[AlphaSeqNbr])),  9999, RELATED(QueryAtlas[AlphaSeqNbr])+2)"
          },
          {
            "type": "calculated",
            "name": "CustomerLate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([CustomerSeqNbr]=9999, 2, if([WWSeqNum]<[CustomerSeqNbr], 0, 1))"
          },
          {
            "type": "calculated",
            "name": "DebugHWLate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([DebugWASeqNbr]=9999, 2, if([WWSeqNum]<[DebugWASeqNbr], 0, 1))"
          },
          {
            "type": "calculated",
            "name": "InternalSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryIP3IEDrops[IP3IESeqNbr])),  9999, RELATED(QueryIP3IEDrops[IP3IESeqNbr])+3)"
          },
          {
            "type": "calculated",
            "name": "InternalLate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([InternalSeqNbr]=9999, 2, if([WWSeqNum]<[InternalSeqNbr], 0, 1))"
          },
          {
            "type": "calculated",
            "name": "PrevProject",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE(QueryAtlas[PrevProject], QueryAtlas[project], QueryRCR[project], \"No Previous Project\")"
            ]
          },
          {
            "type": "calculated",
            "name": "AlphaOffset",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE(QueryAtlas[Alpha Offset], QueryAtlas[project], QueryRCR[project])"
          },
          {
            "type": "calculated",
            "name": "maxalphaseqnbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var maxalpha = maxx(filter(QueryAtlas, QueryAtlas[project] <> \"Lunar Lake\"), QueryAtlas[AlphaSeqNbr])",
              "",
              "return",
              "calculate(VALUES(QueryAtlas[AlphaSeqNbr]), QueryAtlas[AlphaSeqNbr] = maxalpha)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SecondPrevProject",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE(QueryAtlas[PrevProject], QueryAtlas[project], QueryRCR[PrevProject], \"No Previous Project\")"
            ]
          },
          {
            "name": "hw_family_mapping",
            "dataType": "string",
            "sourceColumn": "hw_family_mapping"
          },
          {
            "name": "Alphaoffsetdate",
            "dataType": "dateTime",
            "sourceColumn": "Alphaoffsetdate"
          },
          {
            "name": "AlphaoffsetdateYYYYWW",
            "dataType": "string",
            "sourceColumn": "AlphaoffsetdateYYYYWW"
          },
          {
            "name": "Betaoffsetdate",
            "dataType": "dateTime",
            "sourceColumn": "Betaoffsetdate"
          },
          {
            "name": "BetaoffsetdateYYYYWW",
            "dataType": "string",
            "sourceColumn": "BetaoffsetdateYYYYWW"
          },
          {
            "name": "PVoffsetdate",
            "dataType": "dateTime",
            "sourceColumn": "PVoffsetdate"
          },
          {
            "name": "PVoffsetdateYYYYWW",
            "dataType": "string",
            "sourceColumn": "PVoffsetdateYYYYWW"
          },
          {
            "type": "calculated",
            "name": "AlphaOffsetSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[AlphaoffsetdateYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "BetaOffsetSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[BetaoffsetdateYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "PVOffsetSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[PVoffsetdateYYYYWW])"
          }
        ],
        "partitions": [
          {
            "name": "QueryRCR",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
                "so keep the joining with table below to return data for alpha/beta/pv...*/",
                "",
                "/*",
                "select RCR.*",
                ",AlphaDates.[Alpha YYYYWW]",
                ",AlphaDates.[PV YYYYWW]",
                ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
                ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
                ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
                ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
                ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
                " from v_ipg_fwsw_rcr RCR",
                "left join ",
                "(",
                "select case ",
                "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                "end as project",
                "",
                ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                "from (",
                "\tselect * from ",
                "\t\t       (select  [DieID],[DieName],",
                "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "\tleft join",
                "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                "\t\t      ) as soc_dates",
                "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                ") as atlas",
                "where 1=1",
                "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                "and ([project] is not null and [project] <> '')",
                "group by",
                "project",
                ")AlphaDates",
                "on RCR.project = AlphaDates.project",
                "*/",
                "select RCR.*",
                ",AlphaDates.[Alpha YYYYWW]",
                ",AlphaDates.[PV YYYYWW]",
                ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
                ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
                ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
                ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
                ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
                ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as Alphaoffsetdate",
                ", (select MAX(DriveToYYYYWW )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as AlphaoffsetdateYYYYWW",
                ", (select MAX(DrivetoExactDate )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as Betaoffsetdate",
                ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as BetaoffsetdateYYYYWW",
                ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdate",
                ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdateYYYYWW",
                " from v_ipg_fwsw_rcr RCR",
                "left join ",
                "(",
                "select case ",
                "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                "end as project",
                "",
                ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                "from (",
                "\tselect * from ",
                "\t\t       (select  [DieID],[DieName],",
                "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "\tleft join",
                "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                "\t\t      ) as soc_dates",
                "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                ") as atlas",
                "where 1=1",
                "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                "and ([project] is not null and [project] <> '')",
                "group by",
                "project",
                ")AlphaDates",
                "on RCR.project = AlphaDates.project",
                "left join (select config.name,config.ipconfigurationid",
                "from v_ipg_carbon_ipconfiguration config",
                "--where config.name = 'ISH5.6_MTL-M/P'",
                ") as carbonoffset",
                "ON carbonoffset.name = release"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
                  "so keep the joining with table below to return data for alpha/beta/pv...*/",
                  "",
                  "/*",
                  "select RCR.*",
                  ",AlphaDates.[Alpha YYYYWW]",
                  ",AlphaDates.[PV YYYYWW]",
                  ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
                  ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
                  ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
                  ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
                  ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
                  " from v_ipg_fwsw_rcr RCR",
                  "left join ",
                  "(",
                  "select case ",
                  "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                  "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                  "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                  "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                  "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                  "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                  "end as project",
                  "",
                  ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                  ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                  "from (",
                  "\tselect * from ",
                  "\t\t       (select  [DieID],[DieName],",
                  "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                  "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "\tleft join",
                  "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                  "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                  "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                  "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                  "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                  "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                  "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                  "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                  "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                  "\t\t      ) as soc_dates",
                  "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                  "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                  "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                  ") as atlas",
                  "where 1=1",
                  "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                  "and ([project] is not null and [project] <> '')",
                  "group by",
                  "project",
                  ")AlphaDates",
                  "on RCR.project = AlphaDates.project",
                  "*/",
                  "select RCR.*",
                  ",AlphaDates.[Alpha YYYYWW]",
                  ",AlphaDates.[PV YYYYWW]",
                  ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
                  ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
                  ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
                  ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
                  ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
                  ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as Alphaoffsetdate",
                  ", (select MAX(DriveToYYYYWW )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as AlphaoffsetdateYYYYWW",
                  ", (select MAX(DrivetoExactDate )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as Betaoffsetdate",
                  ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as BetaoffsetdateYYYYWW",
                  ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdate",
                  ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdateYYYYWW",
                  " from v_ipg_fwsw_rcr RCR",
                  "left join ",
                  "(",
                  "select case ",
                  "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                  "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                  "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                  "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                  "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                  "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                  "end as project",
                  "",
                  ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
                  ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
                  "from (",
                  "\tselect * from ",
                  "\t\t       (select  [DieID],[DieName],",
                  "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                  "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "\tleft join",
                  "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
                  "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                  "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
                  "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
                  "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                  "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                  "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                  "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                  "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                  "\t\t      ) as soc_dates",
                  "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                  "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                  "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
                  ") as atlas",
                  "where 1=1",
                  "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                  "and ([project] is not null and [project] <> '')",
                  "group by",
                  "project",
                  ")AlphaDates",
                  "on RCR.project = AlphaDates.project",
                  "left join (select config.name,config.ipconfigurationid",
                  "from v_ipg_carbon_ipconfiguration config",
                  "--where config.name = 'ISH5.6_MTL-M/P'",
                  ") as carbonoffset",
                  "ON carbonoffset.name = release</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "TotalRCR",
            "expression": "COUNTA([id])"
          },
          {
            "name": "Tiger Lake Cnt",
            "expression": " CALCULATE(COUNTROWS(QueryRCR), filter(QueryRCR,QueryRCR[project] = \"Tiger Lake\"))"
          },
          {
            "name": "Alder Lake Cnt",
            "expression": "CALCULATE(COUNTROWS(QueryRCR), filter(QueryRCR,QueryRCR[project] = \"Alder Lake\"))"
          },
          {
            "name": "Meteor Lake Cnt",
            "expression": " CALCULATE(COUNTROWS(QueryRCR), filter(QueryRCR,QueryRCR[project] = \"Meteor Lake\"))"
          },
          {
            "name": "Ice Lake Cnt",
            "expression": " CALCULATE(COUNTROWS(QueryRCR), filter(QueryRCR,QueryRCR[project] = \"Ice Lake\"))"
          },
          {
            "name": "Mule Creek Falls Cnt",
            "expression": " CALCULATE(COUNTROWS(QueryRCR), filter(QueryRCR,QueryRCR[project] = \"Mule Creek Falls\"))"
          },
          {
            "name": "Alder Lake Cum Alpha",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[MonthOffsetTest]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Alder Lake\" )), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Alder Lake\" && QueryRCR[MonthOffsetTest] <= max(QueryRCR[MonthOffsetTest]) && not(ISBLANK(QueryRCR[MonthOffsetTest]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum Alpha",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[MonthOffsetTest]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Tiger Lake\" && QueryRCR[MonthOffsetTest] <= max(QueryRCR[MonthOffsetTest]) && not(ISBLANK(QueryRCR[MonthOffsetTest]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum Alpha",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[MonthOffsetTest]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Meteor Lake\" && QueryRCR[MonthOffsetTest] <= max(QueryRCR[MonthOffsetTest]) && not(ISBLANK(QueryRCR[MonthOffsetTest]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum Alpha",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[MonthOffsetTest]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Ice Lake\" && QueryRCR[MonthOffsetTest] <= max(QueryRCR[MonthOffsetTest]) && not(ISBLANK(QueryRCR[MonthOffsetTest]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Alder Lake Cum PV",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[PVMonthOffset]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Alder Lake\" && QueryRCR[PVMonthOffset] <= max(QueryRCR[PVMonthOffset]) && not(ISBLANK(QueryRCR[PVMonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Tiger Lake Cum PV",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[PVMonthOffset]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Tiger Lake\" && QueryRCR[PVMonthOffset] <= max(QueryRCR[PVMonthOffset]) && not(ISBLANK(QueryRCR[PVMonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Cum PV",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[PVMonthOffset]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Meteor Lake\" && QueryRCR[PVMonthOffset] <= max(QueryRCR[PVMonthOffset]) && not(ISBLANK(QueryRCR[PVMonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Ice Lake Cum PV",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryRCR[PVMonthOffset]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    count(QueryRCR[id]),",
              "    filter(",
              "        ALLSELECTED(QueryRCR),",
              "        QueryRCR[project] = \"Ice Lake\" && QueryRCR[PVMonthOffset] <= max(QueryRCR[PVMonthOffset]) && not(ISBLANK(QueryRCR[PVMonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "mtl max",
            "expression": " calculate(max(QueryRCR[MonthOffsetTest]),QueryRCR[project] = \"Meteor Lake\")"
          },
          {
            "name": "Alder Lake Latest",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryRCR[yyyyww]),FILTER(QueryRCR, QueryRCR[project] = \"Alder Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Tiger Lake Latest",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryRCR[yyyyww]),FILTER(QueryRCR, QueryRCR[project] = \"Tiger Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Meteor Lake Latest",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryRCR[yyyyww]),FILTER(QueryRCR, QueryRCR[project] = \"Meteor Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Ice Lake Latest",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryRCR[yyyyww]),FILTER(QueryRCR, QueryRCR[project] = \"Ice Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "rcr_total_hwwa",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"HW WA\")) + 0"
          },
          {
            "name": "rcr_total_customer",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Customer\")) + 0"
          },
          {
            "name": "rcr_total_internal",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Internal\")) + 0"
          },
          {
            "name": "rcr_total_hwwa_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"HW WA\"&&QueryRCR[HWWALate]=1)) + 0"
          },
          {
            "name": "rcr_total_customer_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Customer\"&&QueryRCR[CustomerLate]=1)) + 0"
          },
          {
            "name": "HWWA_Late",
            "expression": "[rcr_total_hwwa_late]&\"/\"&[rcr_total_hwwa]"
          },
          {
            "name": "Customer_Late",
            "expression": "[rcr_total_customer_late]&\"/\"&[rcr_total_customer]"
          },
          {
            "name": "rcr_total_internal_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Internal\"&&QueryRCR[InternalLate]=1)) + 0"
          },
          {
            "name": "Internal_Late",
            "expression": "[rcr_total_internal_late]&\"/\"&[rcr_total_internal]"
          },
          {
            "name": "rcr_total_POREnabler",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"POR Enabler\")) + 0"
          },
          {
            "name": "rcr_total_IntelPOR",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Intel POR\")) + 0"
          },
          {
            "name": "rcr_total_DebugWA",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Debug WA\")) + 0"
          },
          {
            "name": "rcr_total_POREnabler_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"POR Enabler\"&&QueryRCR[InternalLate]=1)) + 0"
          },
          {
            "name": "rcr_total_IntelPOR_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Intel POR\"&&QueryRCR[InternalLate]=1)) + 0"
          },
          {
            "name": "rcr_total_DebugWA_late",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryRCR[id]), FILTER(QueryRCR, QueryRCR[category] = \"Debug WA\"&&QueryRCR[InternalLate]=1)) + 0"
          },
          {
            "name": "POREnabler_Late",
            "expression": "[rcr_total_POREnabler_late]&\"/\"&[rcr_total_POREnabler]"
          },
          {
            "name": "IntelPOR_Late",
            "expression": "[rcr_total_IntelPOR_late]&\"/\"&[rcr_total_IntelPOR]"
          },
          {
            "name": "DebugWA_Late",
            "expression": "[rcr_total_DebugWA_late]&\"/\"&[rcr_total_DebugWA]"
          },
          {
            "name": "prevrcrcount",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset )+0,0)"
            ]
          },
          {
            "name": "currentrcrcount",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\")+0",
              ""
            ]
          },
          {
            "name": "current/prev",
            "expression": " [currentrcrcount] & \"/\" & [prevrcrcount]"
          },
          {
            "name": "CurrRCR/PrevRCR%",
            "expression": [
              "",
              "IF(([prevrcrcount]=0) && ([currentrcrcount] <> 0) && [currentrcrcount] > 0, -1,",
              "",
              "    IF([prevrcrcount]=0 && [currentrcrcount]=0, 0,",
              "",
              "    ([prevrcrcount]-[currentrcrcount])/[prevrcrcount]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrow",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%]), BLANK(),",
              "    [CurrRCR/PrevRCR%]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%]<0, UNICHAR(9650),",
              "    BLANK())"
            ]
          },
          {
            "name": "currentrcrcountcustomer",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"Customer\")+0",
              ""
            ]
          },
          {
            "name": "currentrcrcounthwwa",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"HW WA\")+0",
              ""
            ]
          },
          {
            "name": "currentrcrcountinternal",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"Internal\")+0",
              ""
            ]
          },
          {
            "name": "currentrcrcountPOREnabler",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"POR Enabler\")+0",
              ""
            ]
          },
          {
            "name": "currentrcrcountIntelPOR",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"Intel POR\")+0",
              ""
            ]
          },
          {
            "name": "currentrcrcountDebugWA",
            "expression": [
              "",
              " ",
              "var CurrProject = CONCATENATEX(VALUES(QueryAtlas[project]), QueryAtlas[project], \",\")",
              "",
              "return",
              "CALCULATE(VALUE([TotalRCR]), ",
              "CONTAINSSTRING(CurrProject, QueryRCR[project]),",
              " QueryRCR[project] <> BLANK(),",
              " QueryRCR[project] <> \"\",",
              " QueryRCR[category] = \"Debug WA\")+0",
              ""
            ]
          },
          {
            "name": "current/prevCustomer",
            "expression": " [currentrcrcountcustomer] & \"/\" & [prevrcrcountcustomer]"
          },
          {
            "name": "prevrcrcountcustomer",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(Queryrcr[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"customer\")+0,0)"
            ]
          },
          {
            "name": "prevrcrcounthwwa",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"HW WA\")+0,0)"
            ]
          },
          {
            "name": "prevrcrcountPOREnabler",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"POR Enabler\")+0,0)"
            ]
          },
          {
            "name": "prevrcrcountInternal",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Internal\")+0,0)"
            ]
          },
          {
            "name": "prevrcrcountIntelPOR",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Intel POR\")+0,0)"
            ]
          },
          {
            "name": "prevrcrcountDebugWA",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Debug WA\")+0,0)"
            ]
          },
          {
            "name": "current/prevhwwa",
            "expression": " [currentrcrcounthwwa] & \"/\" & [prevrcrcounthwwa]"
          },
          {
            "name": "current/prevInternal",
            "expression": " [currentrcrcountinternal] & \"/\" & [prevrcrcountInternal]"
          },
          {
            "name": "current/prevPOREnabler",
            "expression": " [currentrcrcountPOREnabler] & \"/\" & [prevrcrcountPOREnabler]"
          },
          {
            "name": "current/prevIntelPOR",
            "expression": " [currentrcrcountIntelPOR] & \"/\" & [prevrcrcountIntelPOR]"
          },
          {
            "name": "current/prevDebugWA",
            "expression": " [currentrcrcountDebugWA] & \"/\" & [prevrcrcountDebugWA]"
          },
          {
            "name": "CurrRCR/PrevRCRArrowCustomer",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%CustomerLATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%CustomerLATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%CustomerLATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%CustomerLATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrowHWWA",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%HWWALATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%HWWALATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%HWWALATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%HWWALATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrowInternal",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%InternalLATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%InternalLATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%InternalLATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%InternalLATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrowPOREnabler",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%POREnablerLATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%POREnablerLATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%POREnablerLATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%POREnablerLATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrowIntelPOR",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%IntelPORLATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%IntelPORLATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%IntelPORLATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%IntelPORLATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "CurrRCR/PrevRCRArrowDebugWA",
            "expression": [
              "",
              "SWITCH(TRUE(),",
              "    ISBLANK([CurrRCR/PrevRCR%DebugWALATE]), BLANK(),",
              "    [CurrRCR/PrevRCR%DebugWALATE]=0, UNICHAR(9644),",
              "    [CurrRCR/PrevRCR%DebugWALATE]>0, UNICHAR(9660),",
              "    [CurrRCR/PrevRCR%DebugWALATE]<0, UNICHAR(9650),",
              "    BLANK())",
              ""
            ]
          },
          {
            "name": "Curr/Prevrcr%Round",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%Roundcustomer",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%CustomerLATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%Roundhwwa",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%HWWALATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%Roundinternal",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%InternalLATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%RoundPOREnabler",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%POREnablerLATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%RoundIntelPOR",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%IntelPORLATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "Curr/Prevrcr%RoundDebugWA",
            "expression": [
              "",
              "CONCATENATE(ABS(ROUND(([CurrRCR/PrevRCR%DebugWALATE]*100),0)),\" %\")"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%CustomerLATE",
            "expression": [
              "",
              "IF(([rcrlate/total%Customerprevious]=0) && ([rcrlate/total%customer] <> 0) && [rcrlate/total%customer] > 0, -1,",
              "",
              "    IF([rcrlate/total%Customerprevious]=0 && [rcrlate/total%customer]=0, 0,",
              "",
              "    ([rcrlate/total%Customerprevious]-[rcrlate/total%customer])/[rcrlate/total%Customerprevious]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%HWWALATE",
            "expression": [
              "",
              "IF(([rcrlate/total%hwaaprevious]=0) && ([rcrlate/total%hwaa] <> 0) && [rcrlate/total%hwaa] > 0, -1,",
              "",
              "    IF([rcrlate/total%hwaaprevious]=0 && [rcrlate/total%hwaa]=0, 0,",
              "",
              "    ([rcrlate/total%hwaaprevious]-[rcrlate/total%hwaa])/[rcrlate/total%hwaaprevious]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%InternalLATE",
            "expression": [
              "",
              "IF(([rcrlate/total%Internalprevious]=0) && ([rcrlate/total%internal] <> 0) && [rcrlate/total%internal] > 0, -1,",
              "",
              "    IF([rcrlate/total%Internalprevious]=0 && [rcrlate/total%internal]=0, 0,",
              "",
              "    ([rcrlate/total%Internalprevious]-[rcrlate/total%internal])/[rcrlate/total%Internalprevious]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%POREnablerLATE",
            "expression": [
              "",
              "IF(([rcrlate/total%POREnablerprevious]=0) && ([rcrlate/total%porenabler] <> 0) && [rcrlate/total%porenabler] > 0, -1,",
              "",
              "    IF([rcrlate/total%POREnablerprevious]=0 && [rcrlate/total%porenabler] =0, 0,",
              "",
              "    ([rcrlate/total%POREnablerprevious]-[rcrlate/total%porenabler] )/[rcrlate/total%POREnablerprevious]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%IntelPORLATE",
            "expression": [
              "",
              "IF(([rcrlate/total%IntelPORprevious]=0) && ([rcrlate/total%intelpor] <> 0) && [rcrlate/total%intelpor] > 0, -1,",
              "",
              "    IF([rcrlate/total%IntelPORprevious]=0 && [rcrlate/total%intelpor]=0, 0,",
              "",
              "    ([rcrlate/total%IntelPORprevious]-[rcrlate/total%intelpor])/[rcrlate/total%IntelPORprevious]))"
            ]
          },
          {
            "name": "CurrRCR/PrevRCR%DebugWALATE",
            "expression": [
              "",
              "IF(([rcrlate/total%DebugWAprevious]=0) && ([rcrlate/total%debugwa] <> 0) && [rcrlate/total%debugwa] > 0, -1,",
              "",
              "    IF([rcrlate/total%DebugWAprevious]=0 && [rcrlate/total%debugwa]=0, 0,",
              "",
              "    ([rcrlate/total%DebugWAprevious]-[rcrlate/total%debugwa])/[rcrlate/total%DebugWAprevious]))"
            ]
          },
          {
            "name": "rcrlate/total%hwaa",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_hwwa]=0) && ([rcr_total_hwwa_late] <> 0) && [rcr_total_hwwa_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_hwwa_late]=0 && [rcr_total_hwwa]=0, 0,",
              "",
              "   QueryRCR[rcr_total_hwwa_late]/[rcr_total_hwwa]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%customer",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_customer]=0) && ([rcr_total_customer_late] <> 0) && [rcr_total_customer_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_customer_late]=0 && [rcr_total_customer]=0, 0,",
              "",
              "   QueryRCR[rcr_total_customer_late]/[rcr_total_customer]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%internal",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_internal]=0) && ([rcr_total_internal_late] <> 0) && [rcr_total_internal_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_internal_late]=0 && [rcr_total_internal]=0, 0,",
              "",
              "   QueryRCR[rcr_total_internal_late]/[rcr_total_internal]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%porenabler",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_POREnabler]=0) && ([rcr_total_POREnabler_late] <> 0) && [rcr_total_POREnabler_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_POREnabler_late]=0 && [rcr_total_POREnabler]=0, 0,",
              "",
              "   QueryRCR[rcr_total_POREnabler_late]/[rcr_total_POREnabler]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%intelpor",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_IntelPOR]=0) && ([rcr_total_IntelPOR_late] <> 0) && [rcr_total_IntelPOR_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_IntelPOR_late]=0 && [rcr_total_IntelPOR]=0, 0,",
              "",
              "   QueryRCR[rcr_total_IntelPOR_late]/[rcr_total_IntelPOR]))",
              "   ",
              "    --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%debugwa",
            "expression": [
              " ",
              "var valuedecimal =IF(([rcr_total_DebugWA]=0) && ([rcr_total_DebugWA_late] <> 0) && [rcr_total_DebugWA_late] > 0, -1,",
              "",
              "    IF(QueryRCR[rcr_total_DebugWA_late]=0 && [rcr_total_DebugWA]=0, 0,",
              "",
              "   QueryRCR[rcr_total_DebugWA_late]/[rcr_total_DebugWA]))",
              "   ",
              "     --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "prevrcrcountlatehwwa",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"HW WA\", QueryRCR[HWWALate] = 1)+0,0)"
            ]
          },
          {
            "name": "prevrcrcountlatecustomer",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"customer\", QueryRCR[CustomerLate] = 1)+0,0)"
            ]
          },
          {
            "name": "prevrcrcountlateInternal",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Internal\",QueryRCR[InternalLate] = 1)+0,0)"
            ]
          },
          {
            "name": "prevrcrcountlateDebugWA",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Debug WA\", QueryRCR[InternalLate] = 1)+0,0)"
            ]
          },
          {
            "name": "prevrcrcountlatePOREnabler",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"POR Enabler\", QueryRCR[InternalLate] = 1)+0,0)"
            ]
          },
          {
            "name": "prevrcrcountlateIntelPOR",
            "expression": [
              " ",
              "var lastProject = CONCATENATEX(VALUES(QueryAtlas[PrevProject]),QueryAtlas[PrevProject],\",\")",
              "var currentoffset = MIN(QueryAtlas[Alpha Offset])",
              "return",
              "if(ISCROSSFILTERED(QueryRCR[project]), CALCULATE(value(QueryRCR[TotalRCR]), CONTAINSSTRING(lastProject, QueryRCR[project]), value(QueryRCR[yyyyww]) > 0, QueryRCR[project] <> BLANK(), QueryRCR[project] <> \"\",QueryRCR[MonthOffsetTest]<= currentoffset, QueryRCR[category] = \"Intel POR\", QueryRCR[InternalLate] = 1)+0,0)"
            ]
          },
          {
            "name": "rcrlate/total%hwaaprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcounthwwa]=0) && ([prevrcrcountlatehwwa] <> 0) && [prevrcrcountlatehwwa] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlatehwwa]=0 && [prevrcrcounthwwa]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlatehwwa]/[prevrcrcounthwwa]))",
              "      --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%Customerprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcountcustomer]=0) && ([prevrcrcountlatecustomer] <> 0) && [prevrcrcountlatecustomer] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlatecustomer]=0 && [prevrcrcountcustomer]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlatecustomer]/[prevrcrcountcustomer]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%Internalprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcountInternal]=0) && ([prevrcrcountlateInternal] <> 0) && [prevrcrcountlateInternal] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlateInternal]=0 && [prevrcrcountInternal]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlateInternal]/[prevrcrcountInternal]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%POREnablerprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcountPOREnabler]=0) && ([prevrcrcountlatePOREnabler] <> 0) && [prevrcrcountlatePOREnabler] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlatePOREnabler]=0 && [prevrcrcountPOREnabler]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlatePOREnabler]/[prevrcrcountPOREnabler]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%IntelPORprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcountIntelPOR]=0) && ([prevrcrcountlateIntelPOR] <> 0) && [prevrcrcountlateIntelPOR] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlateIntelPOR]=0 && [prevrcrcountIntelPOR]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlateIntelPOR]/[prevrcrcountIntelPOR]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate/total%DebugWAprevious",
            "expression": [
              " ",
              "var valuedecimal =IF(([prevrcrcountDebugWA]=0) && ([prevrcrcountlateDebugWA] <> 0) && [prevrcrcountlateDebugWA] > 0, -1,",
              "",
              "    IF(QueryRCR[prevrcrcountlateDebugWA]=0 && [prevrcrcountDebugWA]=0, 0,",
              "",
              "   QueryRCR[prevrcrcountlateDebugWA]/[prevrcrcountDebugWA]))",
              "   ",
              "   --return ROUND(valuedecimal * 100, 0) & \"%\"",
              "   return valuedecimal"
            ]
          },
          {
            "name": "rcrlate%hwaaROUND",
            "expression": " round([rcrlate/total%hwaa] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%customerROUND",
            "expression": " round([rcrlate/total%customer] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%internalROUND",
            "expression": " round([rcrlate/total%internal] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%POREnablerROUND",
            "expression": " round([rcrlate/total%porenabler] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%IntelPORROUND",
            "expression": " round([rcrlate/total%intelpor] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%DebugWAROUND",
            "expression": " round([rcrlate/total%debugwa] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%hwaaPREVROUND",
            "expression": " round([rcrlate/total%hwaaprevious] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%CustomerPREVROUND",
            "expression": " round([rcrlate/total%Customerprevious] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%iInternalPREVROUND",
            "expression": " round([rcrlate/total%internalprevious] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%POREnablerPREVROUND",
            "expression": " round([rcrlate/total%porenablerprevious] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%IntelPORPREVROUND",
            "expression": " round([rcrlate/total%intelporprevious] * 100, 0) & \"%\""
          },
          {
            "name": "rcrlate%DebugWAPREVROUND",
            "expression": " round([rcrlate/total%debugwaprevious] * 100, 0) & \"%\""
          },
          {
            "name": "PREVLate/TotalHWAA",
            "expression": " [prevrcrcountlatehwwa]& \"/\" & [prevrcrcounthwwa]"
          },
          {
            "name": "PREVLate/TotalCustomer",
            "expression": " [prevrcrcountlatecustomer]& \"/\" & [prevrcrcountcustomer]"
          },
          {
            "name": "PREVLate/TotalInternal",
            "expression": " [prevrcrcountlateInternal]& \"/\" & [prevrcrcountInternal]"
          },
          {
            "name": "PREVLate/TotalPOREnabler",
            "expression": " [prevrcrcountlatePOREnabler]& \"/\" & [prevrcrcountPOREnabler]"
          },
          {
            "name": "PREVLate/TotalIntelPOR",
            "expression": " [prevrcrcountlateIntelPOR]& \"/\" & [prevrcrcountIntelPOR]"
          },
          {
            "name": "PREVLate/TotalDebugWA",
            "expression": " [prevrcrcountlateDebugWA]& \"/\" & [prevrcrcountDebugWA]"
          },
          {
            "name": "CurrentvsPrevLATE%HWAA",
            "expression": [
              "",
              "round([rcrlate/total%hwaa] * 100,0) & \"%/\" & (round([rcrlate/total%hwaaprevious] * 100,0)) & \"%\""
            ]
          },
          {
            "name": "CurrentvsPrevLATE%Customer",
            "expression": [
              "",
              "round([rcrlate/total%customer] * 100,0) & \"%/\" & (round([rcrlate/total%customerprevious] * 100,0)) & \"%\""
            ]
          },
          {
            "name": "CurrentvsPrevLATE%Internal",
            "expression": [
              "",
              "round([rcrlate/total%internal] * 100,0) & \"%/\" & (round([rcrlate/total%internalprevious] * 100,0)) & \"%\""
            ]
          },
          {
            "name": "CurrentvsPrevLATE%POREnabler",
            "expression": [
              "",
              "round([rcrlate/total%porenabler] * 100,0) & \"%/\" & (round([rcrlate/total%porenablerprevious] * 100,0)) & \"%\""
            ]
          },
          {
            "name": "CurrentvsPrevLATE%IntelPOR",
            "expression": [
              "",
              "round([rcrlate/total%intelpor] * 100,0) & \"%/\" & (round([rcrlate/total%intelporprevious] * 100,0)) & \"%\""
            ]
          },
          {
            "name": "CurrentvsPrevLATE%DebugWA",
            "expression": [
              "",
              "round([rcrlate/total%debugwa] * 100,0) & \"%/\" & (round([rcrlate/total%debugwaprevious] * 100,0)) & \"%\""
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
              "so keep the joining with table below to return data for alpha/beta/pv...*/",
              "",
              "/*",
              "select RCR.*",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
              ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
              ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
              " from v_ipg_fwsw_rcr RCR",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              "",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on RCR.project = AlphaDates.project",
              "*/",
              "select RCR.*",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
              ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
              ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
              ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as Alphaoffsetdate",
              ", (select MAX(DriveToYYYYWW )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as AlphaoffsetdateYYYYWW",
              ", (select MAX(DrivetoExactDate )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as Betaoffsetdate",
              ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as BetaoffsetdateYYYYWW",
              ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdate",
              ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdateYYYYWW",
              " from v_ipg_fwsw_rcr RCR",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              "",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on RCR.project = AlphaDates.project",
              "left join (select config.name,config.ipconfigurationid",
              "from v_ipg_carbon_ipconfiguration config",
              "--where config.name = 'ISH5.6_MTL-M/P'",
              ") as carbonoffset",
              "ON carbonoffset.name = release"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryRCR"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*Technically, we can get alpha, pv, and all other dates from QueryAtlas. However, to minimize breaking the current columns, ",
              "so keep the joining with table below to return data for alpha/beta/pv...*/",
              "",
              "/*",
              "select RCR.*",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
              ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
              ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
              " from v_ipg_fwsw_rcr RCR",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              "",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on RCR.project = AlphaDates.project",
              "*/",
              "select RCR.*",
              ",AlphaDates.[Alpha YYYYWW]",
              ",AlphaDates.[PV YYYYWW]",
              ",DATEADD(WEEK,(CAST(RIGHT(ww_submitted_date, 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT(ww_submitted_date, 4) AS INT) - 1970,0)) as DateTest",
              ",DATEADD(WEEK,(CAST(RIGHT([Alpha YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([Alpha YYYYWW], 4) AS INT) - 1970,0)) as AlphaDateTest ",
              ",DATEADD(WEEK,(CAST(RIGHT([PV YYYYWW], 2) AS INT))-1,DATEADD(YEAR,CAST(LEFT([PV YYYYWW], 4) AS INT) - 1970,0)) as PVDateTest ",
              ",DATEDIFF(month,AlphaDateTest,DateTest) as MonthOffsetTest",
              ",DATEDIFF(month,PVDateTest,DateTest) as PVMonthOffset",
              ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as Alphaoffsetdate",
              ", (select MAX(DriveToYYYYWW )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Alpha') as AlphaoffsetdateYYYYWW",
              ", (select MAX(DrivetoExactDate )from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as Betaoffsetdate",
              ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'Beta') as BetaoffsetdateYYYYWW",
              ", (select MAX(DrivetoExactDate) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdate",
              ", (select MAX(DriveToYYYYWW) from v_ipg_carbon_milestone where ipconfigurationid = carbonoffset.ipconfigurationid and drop = 'PV') as PVoffsetdateYYYYWW",
              " from v_ipg_fwsw_rcr RCR",
              "left join ",
              "(",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              "",
              ",min(case when [SOC Drop] = 'Alpha' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then (CAST([SOC Date YYYYWW] as INT))-2 end) as [PV YYYYWW]",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "\tleft join",
              "\t\t      (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\t\t      case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t\t      when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\t\t      case when [SOC Drop] = 'Tape In' then 1 when [SOC Drop] = 'Power On' then 2 when [SOC Drop] = 'PRQ' then 3  ",
              "\t\t      when [SOC Drop] = 'Alpha' then 4 when [SOC Drop] = 'Beta' then 5 when [SOC Drop] = 'PV' then 6 end as [SOC Drop order],",
              "\t\t      isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t\t      isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t\t      case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\t\t      and ([Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "\ton (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "\t       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "\t       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project",
              ")AlphaDates",
              "on RCR.project = AlphaDates.project",
              "left join (select config.name,config.ipconfigurationid",
              "from v_ipg_carbon_ipconfiguration config",
              "--where config.name = 'ISH5.6_MTL-M/P'",
              ") as carbonoffset",
              "ON carbonoffset.name = release</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryFWSWTrend",
        "columns": [
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentweek",
            "dataType": "int64",
            "sourceColumn": "currentweek",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "ww_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([WW],2)"
          }
        ],
        "partitions": [
          {
            "name": "QueryFWSWTrend",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct WW, datepart(ww, getutcdate())  as currentweek from [IPG_WORKWEEKS_HSD_ES] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)",
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct WW, datepart(ww, getutcdate())  as currentweek from [IPG_WORKWEEKS_HSD_ES] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct WW, datepart(ww, getutcdate())  as currentweek from [IPG_WORKWEEKS_HSD_ES] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryFWSWTrend"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct WW, datepart(ww, getutcdate())  as currentweek from [IPG_WORKWEEKS_HSD_ES] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryAtlas",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "type": "calculated",
            "name": "Alpha Offset",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "DATEDIFF(QueryAtlas[Alpha Date],QueryAtlas[CurrentDate],MONTH)"
          },
          {
            "name": "Alpha YYYYWW",
            "dataType": "string",
            "sourceColumn": "Alpha YYYYWW"
          },
          {
            "name": "PV YYYYWW",
            "dataType": "string",
            "sourceColumn": "PV YYYYWW"
          },
          {
            "type": "calculated",
            "name": "Alpha Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              " (DATE ( VALUE ( LEFT (QueryAtlas[Alpha YYYYWW], 4 ) ), 1, 1 )",
              "    + VALUE ( RIGHT ( QueryAtlas[Alpha YYYYWW], 2 ) ) * 7",
              "    - 1)",
              "    "
            ]
          },
          {
            "type": "calculated",
            "name": "PV Date",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "(DATE ( VALUE ( LEFT (QueryAtlas[PV YYYYWW], 4 ) ), 1, 1 )",
              "    + VALUE ( RIGHT ( QueryAtlas[PV YYYYWW], 2 ) ) * 7",
              "    - 1)"
            ]
          },
          {
            "type": "calculated",
            "name": "PV Offset",
            "dataType": "double",
            "isDataTypeInferred": false,
            "expression": "DATEDIFF(QueryAtlas[Alpha Date],QueryAtlas[PV Date],MONTH)"
          },
          {
            "type": "calculated",
            "name": "CurrentDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "TODAY()"
          },
          {
            "type": "calculated",
            "name": "PrevProject",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var prev_Alpha = CALCULATE(MIN(QueryBug[AlphaOffset]), Filter(QueryBug, QueryBug[AlphaOffset] > EARLIER(QueryAtlas[Alpha Offset])))",
              "return LOOKUPVALUE(QueryAtlas[project], QueryAtlas[Alpha Offset], prev_Alpha, \"No Previous Program\")"
            ]
          },
          {
            "name": "VS1.0 YYYYWW",
            "dataType": "int64",
            "sourceColumn": "VS1.0 YYYYWW"
          },
          {
            "name": "Tapein Date",
            "dataType": "dateTime",
            "sourceColumn": "Tapein Date"
          },
          {
            "name": "VS0.5 YYYYWW",
            "dataType": "int64",
            "sourceColumn": "VS0.5 YYYYWW"
          },
          {
            "name": "VS0.8 YYYYWW",
            "dataType": "string",
            "sourceColumn": "VS0.8 YYYYWW"
          },
          {
            "name": "VSV YYYYWW",
            "dataType": "int64",
            "sourceColumn": "VSV YYYYWW"
          },
          {
            "name": "Pre-Alpha YYYYWW",
            "dataType": "int64",
            "sourceColumn": "Pre-Alpha YYYYWW"
          },
          {
            "name": "Alpha_Date",
            "dataType": "dateTime",
            "sourceColumn": "Alpha_Date"
          },
          {
            "name": "Beta YYYYWW",
            "dataType": "int64",
            "sourceColumn": "Beta YYYYWW"
          },
          {
            "name": "PV_Date",
            "dataType": "dateTime",
            "sourceColumn": "PV_Date"
          },
          {
            "type": "calculated",
            "name": "AlphaSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[Alpha YYYYWW])"
          },
          {
            "type": "calculated",
            "name": "VS08SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[VS0.8 YYYYWW])"
          },
          {
            "type": "calculated",
            "name": "2ndPrevProject",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var prev_Alpha = CALCULATE(MIN(QueryBug[AlphaOffset]), Filter(QueryBug, QueryBug[AlphaOffset] > EARLIER(QueryAtlas[Alpha Offset]) && QueryBug[program] <> QueryAtlas[PrevProject]))",
              "return LOOKUPVALUE(QueryAtlas[project], QueryAtlas[Alpha Offset], prev_Alpha, \"No Previous Program\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Last2Projects",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryAtlas[PrevProject]&\", \"&[2ndPrevProject]"
          }
        ],
        "partitions": [
          {
            "name": "QueryAtlas",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*----------------------------------------------------------",
                "This below logic already include the look up earliest Alpha, beta, pv date and go backward 2 weeks",
                "based on the requirement for FW TrendYYYYWW and also VS.* date",
                "------------------------------------------------------------*/",
                "",
                "select case ",
                "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                "end as project",
                ",convert(int, min(case when [SOC Drop] = 'Tape in' then [SOC Date YYYYWW] end)) as [VS1.0 YYYYWW]",
                ",min(case when [SOC Drop] = 'Tape in' then [SOC Date] end) as [Tapein Date]",
                ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.5Date] end)) as [VS0.5 YYYYWW]",
                ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.8Date] end)) as [VS0.8 YYYYWW]",
                ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VSVDate] end)) as [VSV YYYYWW]",
                ",convert(int, min(case when [SOC Drop] = 'PRe-Alpha' then [FW TrendYYYYWW] end)) as [Pre-Alpha YYYYWW]",
                ",convert(int, min(case when [SOC Drop] = 'Alpha' then [FW TrendYYYYWW] end)) as [Alpha YYYYWW]",
                ",min(case when [SOC Drop] = 'Alpha' then [FW Date] end) as [Alpha_Date]",
                ",convert(int, min(case when [SOC Drop] = 'Beta' then [FW TrendYYYYWW] end)) as [Beta YYYYWW]",
                ",convert(int, min(case when [SOC Drop] = 'PV' then [FW TrendYYYYWW] end)) as [PV YYYYWW]",
                ",min(case when [SOC Drop] = 'PV' then [FW Date] end) as [PV_Date]  ",
                "from (",
                "\tselect * from ",
                "\t\t       (select  [DieID],[DieName],",
                "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ",
                "        ) as bom",
                "LEFT JOIN",
                "",
                " (select [Speed ID], [Stepping Name] ,[Milestone],",
                "\tcase when [Milestone] like'%Tape In%' then 'Tape In' ",
                "                        /* when [Milestone] like'%Power On%' then 'Power On' */",
                "                         when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\t         when [Milestone] like'%platform Alpha%' then 'Alpha' ",
                "                           when [Milestone] like '%Platform Pre-Alpha%' then 'Pre-Alpha' ",
                "                           when [Milestone] like'%Beta%' then 'Beta' ",
                "                           when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                "        \t          isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "\t           isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                "\t          datepart(ww, [SOC Date]-2*7) as [FW TrendYYYYWW],",
                "\t          [SOC Date]-2*7 as [FW Date],",
                "\t          [SOC Date]-24*7 as [VS0.5Date],",
                "\t          [SOC Date]-12*7 as [VS0.8Date],\t          ",
                "\t          [SOC Date]+6*7 as [VSVDate]",
                "\t\t     ",
                "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned') ",
                "\t\t      and ([Milestone] like'%PRQ%'  or[Milestone] like'%Tape In%' ",
                "                                               or [Milestone] like'%Power On Start%' ",
                "\t\t      or [Milestone] like'%platform Alpha%' or [milestone] like '%Platform Pre-Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                "\t\t      ) as soc_dates",
                "on (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in('Pre-Alpha', 'Alpha', 'Beta','PV'))",
                ") as atlas",
                "where 1=1",
                "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                "and ([project] is not null and [project] <> '')",
                "group by",
                "project"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*----------------------------------------------------------",
                  "This below logic already include the look up earliest Alpha, beta, pv date and go backward 2 weeks",
                  "based on the requirement for FW TrendYYYYWW and also VS.* date",
                  "------------------------------------------------------------*/",
                  "",
                  "select case ",
                  "when DieName like '%Alder Lake%' then 'Alder Lake' ",
                  "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
                  "when DieName like '%Ice Lake%' then 'Ice Lake' ",
                  "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
                  "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
                  "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
                  "end as project",
                  ",convert(int, min(case when [SOC Drop] = 'Tape in' then [SOC Date YYYYWW] end)) as [VS1.0 YYYYWW]",
                  ",min(case when [SOC Drop] = 'Tape in' then [SOC Date] end) as [Tapein Date]",
                  ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.5Date] end)) as [VS0.5 YYYYWW]",
                  ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.8Date] end)) as [VS0.8 YYYYWW]",
                  ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VSVDate] end)) as [VSV YYYYWW]",
                  ",convert(int, min(case when [SOC Drop] = 'PRe-Alpha' then [FW TrendYYYYWW] end)) as [Pre-Alpha YYYYWW]",
                  ",convert(int, min(case when [SOC Drop] = 'Alpha' then [FW TrendYYYYWW] end)) as [Alpha YYYYWW]",
                  ",min(case when [SOC Drop] = 'Alpha' then [FW Date] end) as [Alpha_Date]",
                  ",convert(int, min(case when [SOC Drop] = 'Beta' then [FW TrendYYYYWW] end)) as [Beta YYYYWW]",
                  ",convert(int, min(case when [SOC Drop] = 'PV' then [FW TrendYYYYWW] end)) as [PV YYYYWW]",
                  ",min(case when [SOC Drop] = 'PV' then [FW Date] end) as [PV_Date]  ",
                  "from (",
                  "\tselect * from ",
                  "\t\t       (select  [DieID],[DieName],",
                  "\t\t      [SiProductItemCd],[SiProductItemDsc],",
                  "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ",
                  "        ) as bom",
                  "LEFT JOIN",
                  "",
                  " (select [Speed ID], [Stepping Name] ,[Milestone],",
                  "\tcase when [Milestone] like'%Tape In%' then 'Tape In' ",
                  "                        /* when [Milestone] like'%Power On%' then 'Power On' */",
                  "                         when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\t         when [Milestone] like'%platform Alpha%' then 'Alpha' ",
                  "                           when [Milestone] like '%Platform Pre-Alpha%' then 'Pre-Alpha' ",
                  "                           when [Milestone] like'%Beta%' then 'Beta' ",
                  "                           when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                  "        \t          isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "\t           isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                  "\t          datepart(ww, [SOC Date]-2*7) as [FW TrendYYYYWW],",
                  "\t          [SOC Date]-2*7 as [FW Date],",
                  "\t          [SOC Date]-24*7 as [VS0.5Date],",
                  "\t          [SOC Date]-12*7 as [VS0.8Date],\t          ",
                  "\t          [SOC Date]+6*7 as [VSVDate]",
                  "\t\t     ",
                  "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned') ",
                  "\t\t      and ([Milestone] like'%PRQ%'  or[Milestone] like'%Tape In%' ",
                  "                                               or [Milestone] like'%Power On Start%' ",
                  "\t\t      or [Milestone] like'%platform Alpha%' or [milestone] like '%Platform Pre-Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
                  "\t\t      ) as soc_dates",
                  "on (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                  "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                  "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in('Pre-Alpha', 'Alpha', 'Beta','PV'))",
                  ") as atlas",
                  "where 1=1",
                  "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
                  "and ([project] is not null and [project] <> '')",
                  "group by",
                  "project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Alder Lake Alpha Date",
            "expression": [
              "",
              "VAR yyyyww =",
              "    CALCULATE (",
              "        MAX ( QueryAtlas[Alpha YYYYWW] ),",
              "        FILTER ( QueryAtlas, QueryAtlas[project] = \"Alder Lake\" )",
              "    )",
              "RETURN",
              "    IF (",
              "        ISBLANK ( yyyyww ),",
              "        \"N/A\",",
              "        \"WW\" & RIGHT ( yyyyww, 2 ) & \"'\"",
              "            & RIGHT ( LEFT ( yyyyww, 4 ), 2 )",
              "    )"
            ]
          },
          {
            "name": "Meteor Lake Alpha Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[Alpha YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Meteor Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Ice Lake Alpha Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[Alpha YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Ice Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Tiger Lake Alpha Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[Alpha YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Tiger Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Alder Lake PV Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[PV YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Alder Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Meteor Lake PV Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[PV YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Meteor Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Ice Lake PV Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[PV YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Ice Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "Tiger Lake PV Date",
            "expression": [
              " var yyyyww = CALCULATE(MAX(QueryAtlas[PV YYYYWW]),FILTER(QueryAtlas, QueryAtlas[project] = \"Tiger Lake\"))",
              "return if(ISBLANK(yyyyww),\"N/A\",\"WW\"&RIGHT(yyyyww,2)&\"'\"&RIGHT(LEFT(yyyyww,4),2))"
            ]
          },
          {
            "name": "SelectedPreviousProject",
            "expression": [
              "",
              "if(MAX(QueryAtlas[PrevProject]) = MIN(QueryAtlas[PrevProject]), MAX(QueryAtlas[PrevProject]), \"No Selection\")"
            ]
          },
          {
            "name": "AtlasNumRows",
            "expression": " CountRows(All(QueryAtlas))"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*----------------------------------------------------------",
              "This below logic already include the look up earliest Alpha, beta, pv date and go backward 2 weeks",
              "based on the requirement for FW TrendYYYYWW and also VS.* date",
              "------------------------------------------------------------*/",
              "",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              ",convert(int, min(case when [SOC Drop] = 'Tape in' then [SOC Date YYYYWW] end)) as [VS1.0 YYYYWW]",
              ",min(case when [SOC Drop] = 'Tape in' then [SOC Date] end) as [Tapein Date]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.5Date] end)) as [VS0.5 YYYYWW]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.8Date] end)) as [VS0.8 YYYYWW]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VSVDate] end)) as [VSV YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'PRe-Alpha' then [FW TrendYYYYWW] end)) as [Pre-Alpha YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'Alpha' then [FW TrendYYYYWW] end)) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'Alpha' then [FW Date] end) as [Alpha_Date]",
              ",convert(int, min(case when [SOC Drop] = 'Beta' then [FW TrendYYYYWW] end)) as [Beta YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'PV' then [FW TrendYYYYWW] end)) as [PV YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then [FW Date] end) as [PV_Date]  ",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ",
              "        ) as bom",
              "LEFT JOIN",
              "",
              " (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\tcase when [Milestone] like'%Tape In%' then 'Tape In' ",
              "                        /* when [Milestone] like'%Power On%' then 'Power On' */",
              "                         when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t         when [Milestone] like'%platform Alpha%' then 'Alpha' ",
              "                           when [Milestone] like '%Platform Pre-Alpha%' then 'Pre-Alpha' ",
              "                           when [Milestone] like'%Beta%' then 'Beta' ",
              "                           when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "        \t          isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t           isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t          datepart(ww, [SOC Date]-2*7) as [FW TrendYYYYWW],",
              "\t          [SOC Date]-2*7 as [FW Date],",
              "\t          [SOC Date]-24*7 as [VS0.5Date],",
              "\t          [SOC Date]-12*7 as [VS0.8Date],\t          ",
              "\t          [SOC Date]+6*7 as [VSVDate]",
              "\t\t     ",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned') ",
              "\t\t      and ([Milestone] like'%PRQ%'  or[Milestone] like'%Tape In%' ",
              "                                               or [Milestone] like'%Power On Start%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [milestone] like '%Platform Pre-Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "on (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in('Pre-Alpha', 'Alpha', 'Beta','PV'))",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryAtlas"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*----------------------------------------------------------",
              "This below logic already include the look up earliest Alpha, beta, pv date and go backward 2 weeks",
              "based on the requirement for FW TrendYYYYWW and also VS.* date",
              "------------------------------------------------------------*/",
              "",
              "select case ",
              "when DieName like '%Alder Lake%' then 'Alder Lake' ",
              "when DieName like '%Tiger Lake%' then 'Tiger Lake'",
              "when DieName like '%Ice Lake%' then 'Ice Lake' ",
              "when DieName like '%Meteor Lake%' then 'Meteor Lake'",
              "when DieName like '%Raptor Lake%' then 'Raptor Lake'",
              "when DieName like '%Lunar Lake%' then 'Lunar Lake'",
              "end as project",
              ",convert(int, min(case when [SOC Drop] = 'Tape in' then [SOC Date YYYYWW] end)) as [VS1.0 YYYYWW]",
              ",min(case when [SOC Drop] = 'Tape in' then [SOC Date] end) as [Tapein Date]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.5Date] end)) as [VS0.5 YYYYWW]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VS0.8Date] end)) as [VS0.8 YYYYWW]",
              ",datepart(ww,min(case when [SOC Drop] = 'Tape in' then [VSVDate] end)) as [VSV YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'PRe-Alpha' then [FW TrendYYYYWW] end)) as [Pre-Alpha YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'Alpha' then [FW TrendYYYYWW] end)) as [Alpha YYYYWW]",
              ",min(case when [SOC Drop] = 'Alpha' then [FW Date] end) as [Alpha_Date]",
              ",convert(int, min(case when [SOC Drop] = 'Beta' then [FW TrendYYYYWW] end)) as [Beta YYYYWW]",
              ",convert(int, min(case when [SOC Drop] = 'PV' then [FW TrendYYYYWW] end)) as [PV YYYYWW]",
              ",min(case when [SOC Drop] = 'PV' then [FW Date] end) as [PV_Date]  ",
              "from (",
              "\tselect * from ",
              "\t\t       (select  [DieID],[DieName],",
              "\t\t      [SiProductItemCd],[SiProductItemDsc],",
              "\t\t      [SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\t\t      from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\t\t      where [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ",
              "        ) as bom",
              "LEFT JOIN",
              "",
              " (select [Speed ID], [Stepping Name] ,[Milestone],",
              "\tcase when [Milestone] like'%Tape In%' then 'Tape In' ",
              "                        /* when [Milestone] like'%Power On%' then 'Power On' */",
              "                         when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t         when [Milestone] like'%platform Alpha%' then 'Alpha' ",
              "                           when [Milestone] like '%Platform Pre-Alpha%' then 'Pre-Alpha' ",
              "                           when [Milestone] like'%Beta%' then 'Beta' ",
              "                           when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "        \t          isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\t           isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\t          datepart(ww, [SOC Date]-2*7) as [FW TrendYYYYWW],",
              "\t          [SOC Date]-2*7 as [FW Date],",
              "\t          [SOC Date]-24*7 as [VS0.5Date],",
              "\t          [SOC Date]-12*7 as [VS0.8Date],\t          ",
              "\t          [SOC Date]+6*7 as [VSVDate]",
              "\t\t     ",
              "\t\t      from [V_INSIGHT_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\t\t      where [Planning State] not in ('Delete' ,'Cancelled','Abandoned') ",
              "\t\t      and ([Milestone] like'%PRQ%'  or[Milestone] like'%Tape In%' ",
              "                                               or [Milestone] like'%Power On Start%' ",
              "\t\t      or [Milestone] like'%platform Alpha%' or [milestone] like '%Platform Pre-Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%')",
              "\t\t      ) as soc_dates",
              "on (bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in('Pre-Alpha', 'Alpha', 'Beta','PV'))",
              ") as atlas",
              "where 1=1",
              "and ([SOC Date YYYYWW] is not null and [SOC Date YYYYWW] <> '')",
              "and ([project] is not null and [project] <> '')",
              "group by",
              "project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "Alpha",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "GENERATESERIES(-50,50,1)"
            }
          }
        ],
        "measures": [
          {
            "name": "Reference Point",
            "expression": " if(FIRSTNONBLANK(Alpha[Value], Alpha[Value] = 0) = 0, 400, 0)"
          },
          {
            "name": "ADL Alpha Val",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum Alpha],",
              "        FILTER ( QueryRCR,QueryRCR[MonthOffsetTest] <= SELECTEDVALUE ( Alpha[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL Alpha Val",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum Alpha],FILTER(QueryRCR,QueryRCR[MonthOffsetTest] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL Alpha Val",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum Alpha],FILTER(QueryRCR,QueryRCR[MonthOffsetTest] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL Alpha Val",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum Alpha],FILTER(QueryRCR,QueryRCR[MonthOffsetTest] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Alder Lake Alpha",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ADL Alpha Val]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake Alpha",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[TGL Alpha Val]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake Alpha",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[MTL Alpha Val] ",
              ")))"
            ]
          },
          {
            "name": "Ice Lake Alpha",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryRCR[MonthOffsetTest]),filter(ALL(QueryRCR),QueryRCR[project] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ICL Alpha Val]",
              ")))"
            ]
          },
          {
            "name": "ADL Alpha Bug",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum Alpha-Bug],",
              "        FILTER ( QueryBug, QueryBug[MonthOffset] <= SELECTEDVALUE ( Alpha[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL Alpha Bug",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum Alpha-Bug],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL Alpha Bug",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum Alpha-Bug],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL Alpha Bug",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Ice Lake Cum Alpha-Bug],",
              "        FILTER ( QueryBug, QueryBug[MonthOffset] <= SELECTEDVALUE ( Alpha[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "Alder Lake Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( Alpha[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[AlphaOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( Alpha[Value] ), Alpha[Value] <= MAX ( Alpha[Value] ) ),",
              "            [ADL Alpha Bug]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake Alpha-Bug",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[AlphaOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[MTL Alpha Bug]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake Alpha-Bug",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[AlphaOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ICL Alpha Bug]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake Alpha-Bug",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[AlphaOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\"  && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[TGL Alpha Bug]",
              ")))"
            ]
          },
          {
            "name": "ADL Alpha Bug-FoundByIP",
            "expression": [
              " var max_so_far = CALCULATE([Alder Lake Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ADL Alpha Bug-FoundbyIntelInternal",
            "expression": [
              " var max_so_far = CALCULATE([Alder Lake Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ADL Alpha Bug-FoundbyIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Alder Lake Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "TGL Alpha Bug-FoundByIP",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "TGL Alpha Bug-FoundIntelInternal",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "TGL Alpha Bug-FoundByIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL Alpha Bug-FoundByIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL Alpha Bug-FoundIntelInternal",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL Alpha Bug-FoundByIP",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL Alpha Bug-FoundByIP",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL Alpha Bug-FoundIntelInternal",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL Alpha Bug-FoundByIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Alder Lake Alpha-Bug-FoundbyIP",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ADL Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Alder Lake Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ADL Alpha Bug-FoundbyIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Alder Lake Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ADL Alpha Bug-FoundbyIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake Alpha-Bug-FoundbyIP",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ICL Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ICL Alpha Bug-FoundIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ICL Alpha Bug-FoundByIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake Alpha-Bug-FoundbyIP",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[TGL Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[TGL Alpha Bug-FoundIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[TGL Alpha Bug-FoundByIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake Alpha-Bug-FoundbyIP",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),",
              "filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[MTL Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[MTL Alpha Bug-FoundIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              " if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[MTL Alpha Bug-FoundByIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "getValuept2",
            "expression": "  [Tiger Lake Alpha-Bug-FoundbyIntelExternal]"
          }
        ]
      },
      {
        "name": "PV",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "GENERATESERIES(-50,50,1)"
            }
          }
        ],
        "measures": [
          {
            "name": "Reference Point2",
            "expression": " if(FIRSTNONBLANK('PV'[Value], 'PV'[Value] = 0) = 0, 500, 0)"
          },
          {
            "name": "ADL PV Val",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum PV],",
              "        FILTER ( QueryRCR, QueryRCR[PVMonthOffset] <= SELECTEDVALUE ( 'PV'[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL PV Val",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum PV],FILTER(QueryRCR,QueryRCR[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL PV Val",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Meteor Lake Cum PV],",
              "        FILTER ( QueryRCR, QueryRCR[PVMonthOffset] <= SELECTEDVALUE ( 'PV'[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ICL PV Val",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum PV],FILTER(QueryRCR,QueryRCR[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Alder Lake PV",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[ADL PV Val]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake PV",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[TGL PV Val]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake PV",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[MTL PV Val]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake PV",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryRCR[PVMonthOffset]),filter(ALL(QueryRCR),QueryRCR[project] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[ICL PV Val]",
              ")))"
            ]
          },
          {
            "name": "ADL PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Alder Lake Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "TGL PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Tiger Lake Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "MTL PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Meteor Lake Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ICL PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Ice Lake Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Alder Lake PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Alder Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[ADL PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "Tiger Lake PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Tiger Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[TGL PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "Meteor Lake PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Meteor Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[MTL PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "Ice Lake PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = \"Ice Lake\")), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[ICL PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "ADL PV Bug-FoundByIP",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum PV-Bug-Found by IP],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ADL PV Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum PV-Bug-Found by IntelInternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ADL PV Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Alder Lake Cum PV-Bug-Found by IntelExternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL PV Bug-FoundByIP",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Tiger Lake Cum PV-Bug-Found by IP],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL pv Bug-FoundIntelInternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Tiger Lake Cum pv-Bug-Found by IntelInternal],",
              "        FILTER ( QueryBug, QueryBug[pvMonthOffset] <= SELECTEDVALUE ( pv[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "TGL PV Bug-FoundByIntelExternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Tiger Lake Cum PV-Bug-Found by IntelExternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ICL PV Bug-FoundByIntelExternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Ice Lake Cum PV-Bug-Found by IntelExternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ICL PV Bug-FoundIntelInternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Ice Lake Cum PV-Bug-Found by IntelInternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "ICL PV Bug-FoundByIP",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Ice Lake Cum PV-Bug-Found by IP],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "MTL PV Bug-FoundIntelInternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Meteor Lake Cum PV-Bug-Found by IP],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "MTL PV Bug-FoundByIntelExternal",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Meteor Lake Cum PV-Bug-Found by IntelExternal],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "Alder Lake PV-Bug-FoundbyIP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ADL PV Bug-FoundByIP]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake PV-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ADL PV Bug-FoundbyIntelInternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Alder Lake PV-Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Alder Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ADL PV Bug-FoundbyIntelExternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake PV-Bug-FoundbyIP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Ice Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ),PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ICL PV Bug-FoundByIP]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake PV-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Ice Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ICL PV Bug-FoundIntelInternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Ice Lake PV-Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Ice Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ),PV[Value] <= MAX ( PV[Value] ) ),",
              "            [ICL PV Bug-FoundByIntelExternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake PV-Bug-FoundbyIP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Tiger Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [TGL PV Bug-FoundByIP]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake PV-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Tiger Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [TGL PV Bug-FoundIntelInternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Tiger Lake PV-Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Tiger Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [TGL PV Bug-FoundByIntelExternal]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "MTL PV Bug-FoundByIP",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Meteor Lake Cum PV-Bug-Found by IP],",
              "        FILTER ( QueryBug, QueryBug[PVMonthOffset] <= SELECTEDVALUE ( PV[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "Meteor Lake PV-Bug-FoundbyIP",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Meteor Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [MTL PV Bug-FoundByIP]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake PV-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Meteor Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [MTL PV Bug-FoundIntelInternal]",
              "",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Meteor Lake pv-Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( PV[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = \"Meteor Lake\" )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( PV[Value] ), PV[Value] <= MAX ( PV[Value] ) ),",
              "            [MTL pv Bug-FoundByIntelExternal]",
              "        )",
              "    )",
              ")"
            ]
          }
        ]
      },
      {
        "name": "CalendarDate",
        "columns": [
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category",
            "sortByColumn": "category_order"
          },
          {
            "name": "category_order",
            "dataType": "int64",
            "sourceColumn": "category_order"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww"
          },
          {
            "type": "calculated",
            "name": "FutureWW",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var CurrWW = MAX(QueryBug[currentww])",
              "return if(CalendarDate[ww] > CurrWW, 1, 0)"
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalendarDate",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "CalendarDate"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "WWBridge",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "WWseqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(WWBridge), WWBridge[Intel Year-Work Week]<=EARLIER(WWBridge[Intel Year-Work Week]))"
          }
        ],
        "partitions": [
          {
            "name": "WWBridge",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week]",
                "from v_time_day"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
                  "from v_time_day</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week]",
              "from v_time_day"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "WWBridge"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
              "from v_time_day</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QuerySlicer",
        "columns": [
          {
            "name": "program",
            "dataType": "string",
            "sourceColumn": "program",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ipfamily",
            "dataType": "string",
            "sourceColumn": "ipfamily"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier"
          },
          {
            "name": "suborg",
            "dataType": "string",
            "sourceColumn": "suborg"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration"
          },
          {
            "type": "calculated",
            "name": "prevProgram",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryAtlas[PrevProject], QueryAtlas[project], QuerySlicer[program])"
          },
          {
            "type": "calculated",
            "name": "AlphaOffset",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryAtlas[Alpha Offset], QueryAtlas[project], QuerySlicer[program])"
          },
          {
            "name": "ipconfigurationid",
            "dataType": "int64",
            "sourceColumn": "ipconfigurationid"
          }
        ],
        "partitions": [
          {
            "name": "QuerySlicer",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*",
                "select ",
                "distinct",
                "config.name as configuration,",
                "cdm.program as program,",
                "config.ipconfigurationid as ipconfigurationid,",
                "glad.devsuborg as suborg,",
                "glad.ip_supplier as ip_supplier,",
                "glad.family as ipfamily",
                "from ",
                "[v_ipg_family_gladius] as glad",
                "left join",
                "[V_IPG_CARBON_IPCONFIGURATION] as config",
                "on glad.old_family = config.IpFamily",
                "left join",
                "--ipg_fwsw_temp_drop_data as cdm",
                "v_ipg_fwsw_program_masterlist as cdm",
                "on cdm.release = config.name ",
                "where 1=1",
                "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
                "and config.name  <> cdm.program",
                "group by",
                "config.name,",
                "config.ipconfigurationid,",
                "glad.devsuborg,",
                "glad.ip_supplier,",
                "glad.family,",
                "cdm.program ",
                "*/",
                "",
                "select ",
                "distinct",
                "config.name as configuration,",
                "--cdm.program as program,",
                " CASE WHEN name like '%CVF%' THEN 'Clover Falls'",
                "    WHEN name like '%MTL%' THEN 'Meteor Lake'",
                "    WHEN name like '%MCF%' THEN 'Mule Creek Falls'",
                "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
                "    WHEN name like '%ADL%' or name like '%ADP%'THEN 'Alder Lake'",
                "    WHEN name like '%ICL%' THEN 'Ice Lake'",
                "    WHEN name like '%rpl%' THEN 'Raptor Lake'",
                "    WHEN name like '%PTL%' THEN 'Panther Lake'",
                "    WHEN name like '%JSL%' THEN 'Jasper Lake'",
                "    WHEN name like '%LNL%' THEN 'Lunar Lake'",
                "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
                "    WHEN name like '%RPL%' THEN 'Rocket Lake'",
                "    WHEN name like '%CML%' THEN 'Comet Lake'",
                "    ELSE name",
                "    END program,",
                "config.ipconfigurationid as ipconfigurationid,",
                "glad.devsuborg as suborg,",
                "glad.ip_supplier as ip_supplier,",
                "glad.family as ipfamily",
                "from ",
                "[v_ipg_family_gladius] as glad",
                "left join",
                "[V_IPG_CARBON_IPCONFIGURATION] as config",
                "on glad.old_family = config.IpFamily",
                "--left join",
                "--ipg_fwsw_temp_drop_data as cdm",
                "--v_ipg_fwsw_program_masterlist as cdm",
                "--on cdm.release = config.name ",
                "where 1=1",
                "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
                "--and config.name  <> cdm.program",
                "group by",
                "config.name,",
                "config.ipconfigurationid,",
                "glad.devsuborg,",
                "glad.ip_supplier,",
                "glad.family,",
                "program",
                "--cdm.program"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*",
                  "select ",
                  "distinct",
                  "config.name as configuration,",
                  "cdm.program as program,",
                  "config.ipconfigurationid as ipconfigurationid,",
                  "glad.devsuborg as suborg,",
                  "glad.ip_supplier as ip_supplier,",
                  "glad.family as ipfamily",
                  "from ",
                  "[v_ipg_family_gladius] as glad",
                  "left join",
                  "[V_IPG_CARBON_IPCONFIGURATION] as config",
                  "on glad.old_family = config.IpFamily",
                  "left join",
                  "--ipg_fwsw_temp_drop_data as cdm",
                  "v_ipg_fwsw_program_masterlist as cdm",
                  "on cdm.release = config.name ",
                  "where 1=1",
                  "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
                  "and config.name  <> cdm.program",
                  "group by",
                  "config.name,",
                  "config.ipconfigurationid,",
                  "glad.devsuborg,",
                  "glad.ip_supplier,",
                  "glad.family,",
                  "cdm.program ",
                  "*/",
                  "",
                  "select ",
                  "distinct",
                  "config.name as configuration,",
                  "--cdm.program as program,",
                  " CASE WHEN name like '%CVF%' THEN 'Clover Falls'",
                  "    WHEN name like '%MTL%' THEN 'Meteor Lake'",
                  "    WHEN name like '%MCF%' THEN 'Mule Creek Falls'",
                  "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
                  "    WHEN name like '%ADL%' or name like '%ADP%'THEN 'Alder Lake'",
                  "    WHEN name like '%ICL%' THEN 'Ice Lake'",
                  "    WHEN name like '%rpl%' THEN 'Raptor Lake'",
                  "    WHEN name like '%PTL%' THEN 'Panther Lake'",
                  "    WHEN name like '%JSL%' THEN 'Jasper Lake'",
                  "    WHEN name like '%LNL%' THEN 'Lunar Lake'",
                  "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
                  "    WHEN name like '%RPL%' THEN 'Rocket Lake'",
                  "    WHEN name like '%CML%' THEN 'Comet Lake'",
                  "    ELSE name",
                  "    END program,",
                  "config.ipconfigurationid as ipconfigurationid,",
                  "glad.devsuborg as suborg,",
                  "glad.ip_supplier as ip_supplier,",
                  "glad.family as ipfamily",
                  "from ",
                  "[v_ipg_family_gladius] as glad",
                  "left join",
                  "[V_IPG_CARBON_IPCONFIGURATION] as config",
                  "on glad.old_family = config.IpFamily",
                  "--left join",
                  "--ipg_fwsw_temp_drop_data as cdm",
                  "--v_ipg_fwsw_program_masterlist as cdm",
                  "--on cdm.release = config.name ",
                  "where 1=1",
                  "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
                  "--and config.name  <> cdm.program",
                  "group by",
                  "config.name,",
                  "config.ipconfigurationid,",
                  "glad.devsuborg,",
                  "glad.ip_supplier,",
                  "glad.family,",
                  "program",
                  "--cdm.program</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*",
              "select ",
              "distinct",
              "config.name as configuration,",
              "cdm.program as program,",
              "config.ipconfigurationid as ipconfigurationid,",
              "glad.devsuborg as suborg,",
              "glad.ip_supplier as ip_supplier,",
              "glad.family as ipfamily",
              "from ",
              "[v_ipg_family_gladius] as glad",
              "left join",
              "[V_IPG_CARBON_IPCONFIGURATION] as config",
              "on glad.old_family = config.IpFamily",
              "left join",
              "--ipg_fwsw_temp_drop_data as cdm",
              "v_ipg_fwsw_program_masterlist as cdm",
              "on cdm.release = config.name ",
              "where 1=1",
              "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
              "and config.name  <> cdm.program",
              "group by",
              "config.name,",
              "config.ipconfigurationid,",
              "glad.devsuborg,",
              "glad.ip_supplier,",
              "glad.family,",
              "cdm.program ",
              "*/",
              "",
              "select ",
              "distinct",
              "config.name as configuration,",
              "--cdm.program as program,",
              " CASE WHEN name like '%CVF%' THEN 'Clover Falls'",
              "    WHEN name like '%MTL%' THEN 'Meteor Lake'",
              "    WHEN name like '%MCF%' THEN 'Mule Creek Falls'",
              "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
              "    WHEN name like '%ADL%' or name like '%ADP%'THEN 'Alder Lake'",
              "    WHEN name like '%ICL%' THEN 'Ice Lake'",
              "    WHEN name like '%rpl%' THEN 'Raptor Lake'",
              "    WHEN name like '%PTL%' THEN 'Panther Lake'",
              "    WHEN name like '%JSL%' THEN 'Jasper Lake'",
              "    WHEN name like '%LNL%' THEN 'Lunar Lake'",
              "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
              "    WHEN name like '%RPL%' THEN 'Rocket Lake'",
              "    WHEN name like '%CML%' THEN 'Comet Lake'",
              "    ELSE name",
              "    END program,",
              "config.ipconfigurationid as ipconfigurationid,",
              "glad.devsuborg as suborg,",
              "glad.ip_supplier as ip_supplier,",
              "glad.family as ipfamily",
              "from ",
              "[v_ipg_family_gladius] as glad",
              "left join",
              "[V_IPG_CARBON_IPCONFIGURATION] as config",
              "on glad.old_family = config.IpFamily",
              "--left join",
              "--ipg_fwsw_temp_drop_data as cdm",
              "--v_ipg_fwsw_program_masterlist as cdm",
              "--on cdm.release = config.name ",
              "where 1=1",
              "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
              "--and config.name  <> cdm.program",
              "group by",
              "config.name,",
              "config.ipconfigurationid,",
              "glad.devsuborg,",
              "glad.ip_supplier,",
              "glad.family,",
              "program",
              "--cdm.program"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QuerySlicer"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*",
              "select ",
              "distinct",
              "config.name as configuration,",
              "cdm.program as program,",
              "config.ipconfigurationid as ipconfigurationid,",
              "glad.devsuborg as suborg,",
              "glad.ip_supplier as ip_supplier,",
              "glad.family as ipfamily",
              "from ",
              "[v_ipg_family_gladius] as glad",
              "left join",
              "[V_IPG_CARBON_IPCONFIGURATION] as config",
              "on glad.old_family = config.IpFamily",
              "left join",
              "--ipg_fwsw_temp_drop_data as cdm",
              "v_ipg_fwsw_program_masterlist as cdm",
              "on cdm.release = config.name ",
              "where 1=1",
              "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
              "and config.name  <> cdm.program",
              "group by",
              "config.name,",
              "config.ipconfigurationid,",
              "glad.devsuborg,",
              "glad.ip_supplier,",
              "glad.family,",
              "cdm.program ",
              "*/",
              "",
              "select ",
              "distinct",
              "config.name as configuration,",
              "--cdm.program as program,",
              " CASE WHEN name like '%CVF%' THEN 'Clover Falls'",
              "    WHEN name like '%MTL%' THEN 'Meteor Lake'",
              "    WHEN name like '%MCF%' THEN 'Mule Creek Falls'",
              "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
              "    WHEN name like '%ADL%' or name like '%ADP%'THEN 'Alder Lake'",
              "    WHEN name like '%ICL%' THEN 'Ice Lake'",
              "    WHEN name like '%rpl%' THEN 'Raptor Lake'",
              "    WHEN name like '%PTL%' THEN 'Panther Lake'",
              "    WHEN name like '%JSL%' THEN 'Jasper Lake'",
              "    WHEN name like '%LNL%' THEN 'Lunar Lake'",
              "    WHEN name like '%TGL%' THEN 'Tiger Lake'",
              "    WHEN name like '%RPL%' THEN 'Rocket Lake'",
              "    WHEN name like '%CML%' THEN 'Comet Lake'",
              "    ELSE name",
              "    END program,",
              "config.ipconfigurationid as ipconfigurationid,",
              "glad.devsuborg as suborg,",
              "glad.ip_supplier as ip_supplier,",
              "glad.family as ipfamily",
              "from ",
              "[v_ipg_family_gladius] as glad",
              "left join",
              "[V_IPG_CARBON_IPCONFIGURATION] as config",
              "on glad.old_family = config.IpFamily",
              "--left join",
              "--ipg_fwsw_temp_drop_data as cdm",
              "--v_ipg_fwsw_program_masterlist as cdm",
              "--on cdm.release = config.name ",
              "where 1=1",
              "and (glad.ip_supplier IN ( 'Edge Accelerator FWSW') OR glad.family in ('ISH_FWSW'))",
              "--and config.name  <> cdm.program",
              "group by",
              "config.name,",
              "config.ipconfigurationid,",
              "glad.devsuborg,",
              "glad.ip_supplier,",
              "glad.family,",
              "program",
              "--cdm.program</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCalendarWWBridge",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryCalendarWWBridge",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "[Intel Year-Work Week]",
                "from v_ipg_calendar"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "[Intel Year-Work Week]",
                  "from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "[Intel Year-Work Week]",
              "from v_ipg_calendar"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryCalendarWWBridge"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "[Intel Year-Work Week]",
              "from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "urlNavigation",
        "columns": [
          {
            "name": "ReportName",
            "dataType": "string",
            "sourceColumn": "ReportName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "report_order",
            "dataType": "string",
            "sourceColumn": "report_order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "URL",
            "dataType": "string",
            "sourceColumn": "URL",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Level2",
            "dataType": "string",
            "sourceColumn": "Level2",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Order",
            "dataType": "string",
            "sourceColumn": "Order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrgTable",
            "dataType": "string",
            "sourceColumn": "SubOrgTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrgField",
            "dataType": "string",
            "sourceColumn": "SubOrgField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SupplierTable",
            "dataType": "string",
            "sourceColumn": "SupplierTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SupplierField",
            "dataType": "string",
            "sourceColumn": "SupplierField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamilyTable",
            "dataType": "string",
            "sourceColumn": "IPFamilyTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamilyField",
            "dataType": "string",
            "sourceColumn": "IPFamilyField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ConfigurationTable",
            "dataType": "string",
            "sourceColumn": "ConfigurationTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ConfigurationField",
            "dataType": "string",
            "sourceColumn": "ConfigurationField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TimeTable",
            "dataType": "string",
            "sourceColumn": "TimeTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TimeField",
            "dataType": "string",
            "sourceColumn": "TimeField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "YearTable",
            "dataType": "string",
            "sourceColumn": "YearTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "YearField",
            "dataType": "string",
            "sourceColumn": "YearField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "QrtTable",
            "dataType": "string",
            "sourceColumn": "QrtTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "QrtField",
            "dataType": "string",
            "sourceColumn": "QrtField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WWTable",
            "dataType": "string",
            "sourceColumn": "WWTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WWField",
            "dataType": "string",
            "sourceColumn": "WWField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "ProgramTable",
            "dataType": "string",
            "sourceColumn": "ProgramTable"
          },
          {
            "name": "ProgramField",
            "dataType": "string",
            "sourceColumn": "ProgramField"
          }
        ],
        "partitions": [
          {
            "name": "urlNavigation",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * From ",
                "ipg_dashboard_url_mdm"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * From ",
                  "ipg_dashboard_url_mdm</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "nav_urls_all",
            "expression": [
              " CALCULATE(  IF(COUNTROWS(VALUES('urlNavigation'[URL]))>1,BLANK(),VALUES('urlNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "--------------------------------------------Specify only Post Silicon Environment------------------------------------------------",
              "&",
              "\" and QueryBug/is_PreSiPostSi eq 'PostSiBugs'\"",
              "-- ------------------------------------------------------------------------------------------------------------------------------",
              "&",
              "IF(ISFILTERED('QuerySlicer'[suborg]), \" and \" & MAX('urlNavigation'[SubOrgTable])&\"/\"&MAX('urlNavigation'[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[suborg]),\"'\"&[suborg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ip_supplier]), \" and \" & MAX('urlNavigation'[SupplierTable])&\"/\"&MAX('urlNavigation'[SupplierField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ip_supplier]),\"'\"&[ip_supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ipfamily]), \" and \" & MAX('urlNavigation'[IPFamilyTable])&\"/ipfamily\" &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ipfamily]),\"'\"&[ipfamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[program]), \" and \" & MAX('urlNavigation'[ProgramTable])&\"/\"&MAX('urlNavigation'[ProgramField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[program]),\"'\"&[program]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('CalendarDate'[category]) || ISFILTERED('CalendarDate'[Intel Year]) || ISFILTERED('CalendarDate'[Intel Quarter]) || ISFILTERED('CalendarDate'[ww]), \" and \" & MAX('urlNavigation'[WWTable])&\"/\"&MAX('urlNavigation'[WWField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[ww]),[ww], \",\")&\")\"",
              "",
              "&",
              "\" and \" & MAX('urlNavigation'[TimeTable])&\"/\"&MAX('urlNavigation'[TimeField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[category]), \"'\"&[category]&\"'\", \",\")&\")\"",
              "",
              ")  ",
              "",
              "",
              "--  , FILTER('urlNavigation', 'urlNavigation'[Level2] = \"Post-Si Bug Escapes - Retro\") ",
              " ",
              " ",
              " )"
            ]
          },
          {
            "name": "nav_urls_qual2",
            "expression": [
              " CALCULATE(  IF(COUNTROWS(VALUES('urlNavigation'[URL]))>1,BLANK(),VALUES('urlNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "--------------------------------------------Specify only Post Silicon Environment------------------------------------------------",
              "&",
              "\" and QueryBug/is_PreSiPostSi eq 'PostSiBugs'\"",
              "-- ------------------------------------------------------------------------------------------------------------------------------",
              "&",
              "IF(ISFILTERED('QuerySlicer'[suborg]), \" and \" & MAX('urlNavigation'[SubOrgTable])&\"/\"&MAX('urlNavigation'[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[suborg]),\"'\"&[suborg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ip_supplier]), \" and \" & MAX('urlNavigation'[SupplierTable])&\"/\"&MAX('urlNavigation'[SupplierField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ip_supplier]),\"'\"&[ip_supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ipfamily]), \" and \" & MAX('urlNavigation'[IPFamilyTable])&\"/ipfamily\" &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ipfamily]),\"'\"&[ipfamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[program]), \" and \" & MAX('urlNavigation'[ProgramTable])&\"/\"&MAX('urlNavigation'[ProgramField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[program]),\"'\"&[program]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('CalendarDate'[category]) || ISFILTERED('CalendarDate'[Intel Year]) || ISFILTERED('CalendarDate'[Intel Quarter]) || ISFILTERED('CalendarDate'[ww]), \" and \" & MAX('urlNavigation'[WWTable])&\"/\"&MAX('urlNavigation'[WWField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[ww]),[ww], \",\")&\")\"",
              "",
              "&",
              "\" and \" & MAX('urlNavigation'[TimeTable])&\"/\"&MAX('urlNavigation'[TimeField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[category]), \"'\"&[category]&\"'\", \",\")&\")\"",
              "",
              ")  ",
              "",
              "",
              " , FILTER('urlNavigation', 'urlNavigation'[Level2] = \"FWSW Quality Summary\") ",
              " ",
              " ",
              " )"
            ]
          },
          {
            "name": "nav_urls_rcr2",
            "expression": [
              " CALCULATE(  IF(COUNTROWS(VALUES('urlNavigation'[URL]))>1,BLANK(),VALUES('urlNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "--------------------------------------------Specify only Post Silicon Environment------------------------------------------------",
              "&",
              "\" and QueryBug/is_PreSiPostSi eq 'PostSiBugs'\"",
              "-- ------------------------------------------------------------------------------------------------------------------------------",
              "&",
              "IF(ISFILTERED('QuerySlicer'[suborg]), \" and \" & MAX('urlNavigation'[SubOrgTable])&\"/\"&MAX('urlNavigation'[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[suborg]),\"'\"&[suborg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ip_supplier]), \" and \" & MAX('urlNavigation'[SupplierTable])&\"/\"&MAX('urlNavigation'[SupplierField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ip_supplier]),\"'\"&[ip_supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[ipfamily]), \" and \" & MAX('urlNavigation'[IPFamilyTable])&\"/ipfamily\" &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[ipfamily]),\"'\"&[ipfamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('QuerySlicer'[program]), \" and \" & MAX('urlNavigation'[ProgramTable])&\"/\"&MAX('urlNavigation'[ProgramField]) &\" in (\"&CONCATENATEX(VALUES('QuerySlicer'[program]),\"'\"&[program]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED('CalendarDate'[category]) || ISFILTERED('CalendarDate'[Intel Year]) || ISFILTERED('CalendarDate'[Intel Quarter]) || ISFILTERED('CalendarDate'[ww]), \" and \" & MAX('urlNavigation'[WWTable])&\"/\"&MAX('urlNavigation'[WWField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[ww]),[ww], \",\")&\")\"",
              "",
              "&",
              "\" and \" & MAX('urlNavigation'[TimeTable])&\"/\"&MAX('urlNavigation'[TimeField]) &\" in (\"&CONCATENATEX(VALUES('CalendarDate'[category]), \"'\"&[category]&\"'\", \",\")&\")\"",
              "",
              ")  ",
              "",
              "",
              " , FILTER('urlNavigation', 'urlNavigation'[Level2] = \"FWSW RCR Level 2\") ",
              " ",
              " ",
              " )"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * From ",
              "ipg_dashboard_url_mdm"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "urlNavigation"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * From ",
              "ipg_dashboard_url_mdm</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIP3IEDrops",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "trenddate",
            "dataType": "int64",
            "sourceColumn": "trenddate",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "IP3IESeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(WWBridge[WWSeqNbr],WWBridge[Intel Year-Work Week],[trenddate])"
          }
        ],
        "partitions": [
          {
            "name": "QueryIP3IEDrops",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/* 09-06-22: Tina already confirmed with Kristine on the logic below. Due to FWSW doesn't have a valid DIE information in project level, we ",
                "are using the connection to get IE date based on configuration mapping to release only */",
                "",
                "SELECT  distinct ipg.configuration ",
                ",isnull(IP3Date,IEdate) AS trenddate",
                "FROM (",
                "",
                "SELECT  configuration",
                ",ipconfigurationid",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1 ",
                "AND devorg = 'IPG' ",
                "AND complete = 'yes' ",
                "--AND [DropType] IN ('Standard')  --Remove this condition per Punit/Kristine's request on 10/29/21",
                "and drop in ('IP3', 'IP Execution Commit (IE)')",
                ")IPG",
                "/*IE Drop*/",
                "LEFT JOIN (",
                "",
                "SELECT  configuration",
                ",ipconfigurationid",
                ",'IEdrop' as Flag",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1 ",
                "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)' ",
                "AND complete = 'yes' ",
                "GROUP BY  configuration",
                ",ipconfigurationid ",
                ")IE",
                "",
                "ON IPG.ipconfigurationid = IE.ipconfigurationid",
                "",
                "/* IP3 drop*/",
                "LEFT JOIN (",
                "",
                "SELECT  configuration",
                ",ipconfigurationid ",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1 ",
                "AND devorg = 'IPG' and[drop] IN ('IP3') ",
                "AND complete = 'yes' ",
                "GROUP BY  configuration ",
                ",ipconfigurationid ",
                ")IP3",
                "",
                "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                "",
                "WHERE trenddate is not null ",
                "AND trenddate <> ''"
              ],
              "dataSource": "CustomiBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/* 09-06-22: Tina already confirmed with Kristine on the logic below. Due to FWSW doesn't have a valid DIE information in project level, we ",
                  "are using the connection to get IE date based on configuration mapping to release only */",
                  "",
                  "SELECT  distinct ipg.configuration ",
                  ",isnull(IP3Date,IEdate) AS trenddate",
                  "FROM (",
                  "",
                  "SELECT  configuration",
                  ",ipconfigurationid",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1 ",
                  "AND devorg = 'IPG' ",
                  "AND complete = 'yes' ",
                  "--AND [DropType] IN ('Standard')  --Remove this condition per Punit/Kristine's request on 10/29/21",
                  "and drop in ('IP3', 'IP Execution Commit (IE)')",
                  ")IPG",
                  "/*IE Drop*/",
                  "LEFT JOIN (",
                  "",
                  "SELECT  configuration",
                  ",ipconfigurationid",
                  ",'IEdrop' as Flag",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1 ",
                  "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)' ",
                  "AND complete = 'yes' ",
                  "GROUP BY  configuration",
                  ",ipconfigurationid ",
                  ")IE",
                  "",
                  "ON IPG.ipconfigurationid = IE.ipconfigurationid",
                  "",
                  "/* IP3 drop*/",
                  "LEFT JOIN (",
                  "",
                  "SELECT  configuration",
                  ",ipconfigurationid ",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1 ",
                  "AND devorg = 'IPG' and[drop] IN ('IP3') ",
                  "AND complete = 'yes' ",
                  "GROUP BY  configuration ",
                  ",ipconfigurationid ",
                  ")IP3",
                  "",
                  "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                  "",
                  "WHERE trenddate is not null ",
                  "AND trenddate <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/* 09-06-22: Tina already confirmed with Kristine on the logic below. Due to FWSW doesn't have a valid DIE information in project level, we ",
              "are using the connection to get IE date based on configuration mapping to release only */",
              "",
              "SELECT  distinct ipg.configuration ",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' ",
              "AND complete = 'yes' ",
              "--AND [DropType] IN ('Standard')  --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)' ",
              "AND complete = 'yes' ",
              "GROUP BY  configuration",
              ",ipconfigurationid ",
              ")IE",
              "",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid",
              "",
              "/* IP3 drop*/",
              "LEFT JOIN (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid ",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' and[drop] IN ('IP3') ",
              "AND complete = 'yes' ",
              "GROUP BY  configuration ",
              ",ipconfigurationid ",
              ")IP3",
              "",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "",
              "WHERE trenddate is not null ",
              "AND trenddate <> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIP3IEDrops"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/* 09-06-22: Tina already confirmed with Kristine on the logic below. Due to FWSW doesn't have a valid DIE information in project level, we ",
              "are using the connection to get IE date based on configuration mapping to release only */",
              "",
              "SELECT  distinct ipg.configuration ",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' ",
              "AND complete = 'yes' ",
              "--AND [DropType] IN ('Standard')  --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)' ",
              "AND complete = 'yes' ",
              "GROUP BY  configuration",
              ",ipconfigurationid ",
              ")IE",
              "",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid",
              "",
              "/* IP3 drop*/",
              "LEFT JOIN (",
              "",
              "SELECT  configuration",
              ",ipconfigurationid ",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1 ",
              "AND devorg = 'IPG' and[drop] IN ('IP3') ",
              "AND complete = 'yes' ",
              "GROUP BY  configuration ",
              ",ipconfigurationid ",
              ")IP3",
              "",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "",
              "WHERE trenddate is not null ",
              "AND trenddate <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ComparableProgram",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "project",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryAtlas[project]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Count",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Count]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ComparableProject",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ComparableProject]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": " Filter(ADDCOLUMNS( FILTER(CROSSJOIN(SUMMARIZE(QueryAtlas, [project], \"Count\", [AtlasNumRows]), GENERATESERIES(1, [AtlasNumRows], 1)), [Value]<= [Count]), \"ComparableProject\", PATHITEM(CONCATENATEX(QueryAtlas, QueryAtlas[project], \"|\", [Value], ASC), [Value])), Not(IsBlank([ComparableProject])) && Not([project] = [ComparableProject]))"
            }
          }
        ],
        "measures": [
          {
            "name": "ValueComparable",
            "expression": " SelectedValue(ComparableProgram[ComparableProject])"
          },
          {
            "name": "Comparable Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              "",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueComparable])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[CMP Alpha Bug-FoundbyIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "Comparable Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueComparable])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[CMP Alpha Bug-FoundbyIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Comparable Alpha-Bug-FoundbyIP",
            "expression": [
              " ",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueComparable])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[CMP Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Comparable Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug)",
              ",QueryBug[program] = [ValueComparable]&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              " && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = [ValueComparable] &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "&& QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "Comparable Cum Alpha-Bug-Found by IntelInternal",
            "expression": " IF ( SELECTEDVALUE ( QueryBug[MonthOffset] ) > CALCULATE ( MAX ( QueryBug[MonthOffset] ), FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueComparable] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} && QueryBug[IsRealBug] = 1 ) ), BLANK (), CALCULATE ( COUNT ( QueryBug[id] ), FILTER ( ALLSELECTED ( QueryBug ), QueryBug[program] = [ValueComparable] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] ) && NOT ( ISBLANK ( QueryBug[MonthOffset] ) ) ) ) )"
          },
          {
            "name": "Comparable Cum Alpha-Bug-Found by IP",
            "expression": " IF ( SELECTEDVALUE ( QueryBug[MonthOffset] ) > CALCULATE ( MAX ( QueryBug[MonthOffset] ), FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueComparable] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1 ) ), BLANK (), CALCULATE ( COUNT ( QueryBug[id] ), FILTER ( ALLSELECTED ( QueryBug ), QueryBug[program] = [ValueComparable] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] ) && NOT ( ISBLANK ( QueryBug[MonthOffset] ) ) ) ) )"
          },
          {
            "name": "CMP Alpha Bug-FoundbyIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Comparable Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "CMP Alpha Bug-FoundbyIntelInternal",
            "expression": " var max_so_far = CALCULATE([Comparable Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value]))) return max_so_far"
          },
          {
            "name": "CMP Alpha Bug-FoundByIP",
            "expression": " var max_so_far = CALCULATE([Comparable Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value]))) return max_so_far"
          },
          {
            "name": "Original Alpha-Bug-FoundbyIntelExternal",
            "expression": [
              " ",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueOriginal])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ORG Alpha Bug-FoundbyIntelExternal]",
              ")))"
            ]
          },
          {
            "name": "Original Alpha-Bug-FoundbyIntelInternal",
            "expression": [
              "",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueOriginal])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ORG Alpha Bug-FoundbyIntelInternal]",
              ")))"
            ]
          },
          {
            "name": "Original Alpha-Bug-FoundbyIP",
            "expression": [
              "",
              "if(SELECTEDVALUE(Alpha[Value]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueOriginal])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED(Alpha[Value]),",
              "        Alpha[Value] <= max(Alpha[Value])",
              "        ",
              "    ),[ORG Alpha Bug-FoundByIP]",
              ")))"
            ]
          },
          {
            "name": "Original Cum Alpha-Bug-Found by IntelExternal",
            "expression": [
              " ",
              " if(SELECTEDVALUE(QueryBug[MonthOffset]) > calculate(max(QueryBug[MonthOffset]),filter(ALL(QueryBug)",
              ",QueryBug[program] = [ValueOriginal]&&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              " && QueryBug[IsRealBug] = 1)), BLANK(),",
              "CALCULATE(",
              "    count(QueryBug[id]),",
              "    filter(",
              "        ALLSELECTED(QueryBug),",
              "        QueryBug[program] = [ValueOriginal] &&QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "&& QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= max(QueryBug[MonthOffset]) && not(ISBLANK(QueryBug[MonthOffset]) )",
              "        ",
              "    )",
              ")",
              ")"
            ]
          },
          {
            "name": "ValueOriginal",
            "expression": "  SelectedValue(ComparableProgram[project])"
          },
          {
            "name": "Original Cum Alpha-Bug-Found by IntelInternal",
            "expression": " IF ( SELECTEDVALUE ( QueryBug[MonthOffset] ) > CALCULATE ( MAX ( QueryBug[MonthOffset] ), FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueOriginal] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} && QueryBug[IsRealBug] = 1 ) ), BLANK (), CALCULATE ( COUNT ( QueryBug[id] ), FILTER ( ALLSELECTED ( QueryBug ), QueryBug[program] = [ValueOriginal] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by SoC\",\"SW/FW PreSiBug Found by SoC\"} && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] ) && NOT ( ISBLANK ( QueryBug[MonthOffset] ) ) ) ) )"
          },
          {
            "name": "Original Cum Alpha-Bug-Found by IP",
            "expression": " IF ( SELECTEDVALUE ( QueryBug[MonthOffset] ) > CALCULATE ( MAX ( QueryBug[MonthOffset] ), FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueOriginal] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1 ) ), BLANK (), CALCULATE ( COUNT ( QueryBug[id] ), FILTER ( ALLSELECTED ( QueryBug ), QueryBug[program] = [ValueOriginal] && QueryBug[is_found_byPlatform] in {\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\"} && QueryBug[IsRealBug] = 1 && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] ) && NOT ( ISBLANK ( QueryBug[MonthOffset] ) ) ) ) )"
          },
          {
            "name": "ORG Alpha Bug-FoundbyIntelExternal",
            "expression": [
              " var max_so_far = CALCULATE([Original Cum Alpha-Bug-Found by IntelExternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "ORG Alpha Bug-FoundbyIntelInternal",
            "expression": " var max_so_far = CALCULATE([Original Cum Alpha-Bug-Found by IntelInternal],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value]))) return max_so_far"
          },
          {
            "name": "ORG Alpha Bug-FoundByIP",
            "expression": " var max_so_far = CALCULATE([Original Cum Alpha-Bug-Found by IP],FILTER(QueryBug,QueryBug[MonthOffset] <= SELECTEDVALUE(Alpha[Value]))) return max_so_far"
          },
          {
            "name": "Original Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueOriginal]  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = [ValueOriginal]  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "ORG PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Original Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Original PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueOriginal])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[ORG PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "Comparable Cum PV-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[PVMonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[PVMonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueComparable]  && QueryBug[IsRealBug] = 1 )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = [ValueComparable]  && QueryBug[IsRealBug] = 1",
              "                && QueryBug[PVMonthOffset] <= MAX ( QueryBug[PVMonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[PVMonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "CMP PV Val-Bug",
            "expression": [
              " var max_so_far = CALCULATE([Comparable Cum PV-Bug],FILTER(QueryBug,QueryBug[PVMonthOffset] <= SELECTEDVALUE('PV'[Value])))",
              "return max_so_far"
            ]
          },
          {
            "name": "Comparable PV-Bug",
            "expression": [
              " if(SELECTEDVALUE('PV'[Value]) > calculate(max(QueryBug[PVMonthOffset]),filter(ALL(QueryBug),QueryBug[program] = [ValueComparable])), BLANK(),",
              "CALCULATE(",
              "    sumx(",
              "    filter(",
              "        ALLSELECTED('PV'[Value]),",
              "        'PV'[Value] <= max('PV'[Value])",
              "        ",
              "    ),[CMP PV Val-Bug]",
              ")))"
            ]
          },
          {
            "name": "Original Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueOriginal] && QueryBug[IsRealBug] = 1)",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = [ValueOriginal] && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Comparable Cum Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( QueryBug[MonthOffset] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[MonthOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueComparable] && QueryBug[IsRealBug] = 1)",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        COUNT ( QueryBug[id] ),",
              "        FILTER (",
              "            ALLSELECTED ( QueryBug ),",
              "            QueryBug[program] = [ValueComparable] && QueryBug[IsRealBug] = 1",
              "                && QueryBug[MonthOffset] <= MAX ( QueryBug[MonthOffset] )",
              "                && NOT ( ISBLANK ( QueryBug[MonthOffset] ) )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "ORG Alpha Bug",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Original Cum Alpha-Bug],",
              "        FILTER ( QueryBug, QueryBug[MonthOffset] <= SELECTEDVALUE ( Alpha[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "CMP Alpha Bug",
            "expression": [
              "",
              "VAR max_so_far =",
              "    CALCULATE (",
              "        [Comparable Cum Alpha-Bug],",
              "        FILTER ( QueryBug, QueryBug[MonthOffset] <= SELECTEDVALUE ( Alpha[Value] ) )",
              "    )",
              "RETURN",
              "    max_so_far"
            ]
          },
          {
            "name": "Original Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( Alpha[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[AlphaOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueOriginal] )",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( Alpha[Value] ), Alpha[Value] <= MAX ( Alpha[Value] ) ),",
              "            [ORG Alpha Bug]",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "Comparable Alpha-Bug",
            "expression": [
              "",
              "IF (",
              "    SELECTEDVALUE ( Alpha[Value] )",
              "        > CALCULATE (",
              "            MAX ( QueryBug[AlphaOffset] ),",
              "            FILTER ( ALL ( QueryBug ), QueryBug[program] = [ValueComparable])",
              "        ),",
              "    BLANK (),",
              "    CALCULATE (",
              "        SUMX (",
              "            FILTER ( ALLSELECTED ( Alpha[Value] ), Alpha[Value] <= MAX ( Alpha[Value] ) ),",
              "            [CMP Alpha Bug]",
              "        )",
              "    )",
              ")"
            ]
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "8ee91904-5808-4296-8c21-ac152afe262e",
        "fromTable": "QueryBug",
        "fromColumn": "ww_trend",
        "toTable": "QueryFWSWTrend",
        "toColumn": "ww_trend"
      },
      {
        "name": "e11549b9-3343-43ec-8ad0-f041443dbcfa",
        "fromTable": "QueryRCR",
        "fromColumn": "yyyyww",
        "toTable": "QueryIntelWW",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "4799842f-fd6b-4123-96c8-4e92c829e94f",
        "fromTable": "QueryRCR",
        "fromColumn": "project",
        "toTable": "QueryAtlas",
        "toColumn": "project"
      },
      {
        "name": "4405ea19-3efe-4af5-878c-b85c381ccfb0",
        "fromTable": "QueryRCR",
        "fromColumn": "MonthOffsetTest",
        "toTable": "Alpha",
        "toColumn": "Value"
      },
      {
        "name": "452014b2-c317-4640-a984-d523c6b271b3",
        "fromTable": "QueryRCR",
        "fromColumn": "PVMonthOffset",
        "toTable": "PV",
        "toColumn": "Value"
      },
      {
        "name": "0711e6c6-ae3c-4208-9b48-e07e7a4bb6c7",
        "fromTable": "QueryBug",
        "fromColumn": "PVMonthOffset",
        "toTable": "PV",
        "toColumn": "Value"
      },
      {
        "name": "2ccae3b6-4714-473d-a988-73d9bc677385",
        "fromTable": "QueryBug",
        "fromColumn": "MonthOffset",
        "toTable": "Alpha",
        "toColumn": "Value"
      },
      {
        "name": "e781ff86-a4e6-4abd-9532-e446fafc3f20",
        "fromTable": "QueryBug",
        "fromColumn": "family",
        "toTable": "QueryDevSubOrg",
        "toColumn": "old_family"
      },
      {
        "name": "09ffd840-55df-4da5-a4a9-d1f30cf4fc41",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "WWBridge",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "a6c1d15b-5d1a-432a-ba24-a2a8cabdbf65",
        "fromTable": "QueryRCR",
        "fromColumn": "family",
        "toTable": "QueryDevSubOrg",
        "toColumn": "old_family"
      },
      {
        "name": "3f2511c1-1a28-4d21-995c-941470c1b8ba",
        "fromTable": "QueryBug",
        "fromColumn": "release",
        "toTable": "QuerySlicer",
        "toColumn": "configuration"
      },
      {
        "name": "b3b78c2c-4f7c-4eed-b750-920f1298e300",
        "fromTable": "QueryRCR",
        "fromColumn": "release",
        "toTable": "QuerySlicer",
        "toColumn": "configuration"
      },
      {
        "name": "635de55d-6811-4137-93d8-983357e2da0f",
        "fromTable": "CalendarDate",
        "fromColumn": "ww",
        "toTable": "QueryCalendarWWBridge",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "936e13bb-e921-4475-b3fa-bc5adb21c760",
        "fromTable": "QueryRCR",
        "fromColumn": "yyyyww",
        "toTable": "QueryCalendarWWBridge",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "a6dba7d1-a805-4b3f-96b0-c29061a4bcea",
        "fromTable": "QueryRCR",
        "fromColumn": "Alpha Date",
        "toTable": "QueryIP3IEDrops",
        "toColumn": "configuration"
      }
    ],
    "roles": [
      {
        "name": "EIG_Developers",
        "modelPermission": "readRefresh",
        "members": [
          {
            "memberName": "AMR\\EIG_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2795136"
          }
        ]
      },
      {
        "name": "EIG_Superusers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\EIG_Superusers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2795134"
          }
        ]
      },
      {
        "name": "EIG_Users",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\EIG_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2795135"
          }
        ]
      },
      {
        "name": "IPG_Developers",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          }
        ]
      },
      {
        "name": "IPG_Internal",
        "modelPermission": "readRefresh",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          }
        ]
      },
      {
        "name": "IPG_External",
        "modelPermission": "readRefresh",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          }
        ]
      },
      {
        "name": "Faceless",
        "modelPermission": "readRefresh",
        "members": [
          {
            "memberName": "AMR\\ssas_msbitabmd",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2406644"
          }
        ]
      }
    ]
  },
  "id": "SemanticModel"
}